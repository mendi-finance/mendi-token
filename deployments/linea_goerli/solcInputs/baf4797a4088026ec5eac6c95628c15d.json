{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Distributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IMendi.sol\";\nimport \"./interfaces/IClaimable.sol\";\n\nabstract contract Distributor is IClaimable {\n    using SafeMath for uint256;\n\n    uint256 public constant MANTISSA2 = 2 ** 160;\n\n    address public immutable mendi;\n    address public immutable claimable;\n\n    struct Recipient {\n        uint256 shares;\n        uint256 lastShareIndex;\n        uint256 credit;\n    }\n    mapping(address => Recipient) public recipients;\n\n    uint256 public totalShares;\n    uint256 public shareIndex;\n\n    event UpdateShareIndex(uint256 shareIndex);\n    event UpdateCredit(\n        address indexed account,\n        uint256 lastShareIndex,\n        uint256 credit\n    );\n    event EditRecipient(\n        address indexed account,\n        uint256 shares,\n        uint256 totalShares\n    );\n\n    constructor(address mendi_, address claimable_) {\n        mendi = mendi_;\n        claimable = claimable_;\n    }\n\n    function updateShareIndex()\n        public\n        virtual\n        nonReentrant\n        returns (uint256 _shareIndex)\n    {\n        if (totalShares == 0) return shareIndex;\n        uint256 amount = IClaimable(claimable).claim();\n        if (amount == 0) return shareIndex;\n\n        _shareIndex = amount.mul(MANTISSA2).div(totalShares).add(shareIndex);\n        shareIndex = _shareIndex;\n        emit UpdateShareIndex(_shareIndex);\n    }\n\n    function updateCredit(address account) public returns (uint256 credit) {\n        uint256 _shareIndex = updateShareIndex();\n        if (_shareIndex == 0) return 0;\n        Recipient storage recipient = recipients[account];\n        credit =\n            recipient.credit +\n            _shareIndex.sub(recipient.lastShareIndex).mul(recipient.shares) /\n            MANTISSA2;\n        recipient.lastShareIndex = _shareIndex;\n        recipient.credit = credit;\n        emit UpdateCredit(account, _shareIndex, credit);\n    }\n\n    function claimInternal(\n        address account\n    ) internal virtual returns (uint256 amount) {\n        amount = updateCredit(account);\n        if (amount > 0) {\n            recipients[account].credit = 0;\n            IMendi(mendi).transfer(account, amount);\n            emit Claim(account, amount);\n        }\n    }\n\n    function claim() external virtual override returns (uint256 amount) {\n        return claimInternal(msg.sender);\n    }\n\n    function editRecipientInternal(address account, uint256 shares) internal {\n        updateCredit(account);\n        Recipient storage recipient = recipients[account];\n        uint256 prevShares = recipient.shares;\n        uint256 _totalShares = shares > prevShares\n            ? totalShares.add(shares - prevShares)\n            : totalShares.sub(prevShares - shares);\n        totalShares = _totalShares;\n        recipient.shares = shares;\n        emit EditRecipient(account, shares, _totalShares);\n    }\n\n    // Prevents a contract from calling itself, directly or indirectly.\n    bool internal _notEntered = true;\n    modifier nonReentrant() {\n        require(_notEntered, \"Distributor: REENTERED\");\n        _notEntered = false;\n        _;\n        _notEntered = true;\n    }\n}\n"
    },
    "contracts/interfaces/IClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IClaimable {\n    function claim() external returns (uint256 amount);\n\n    event Claim(address indexed account, uint256 amount);\n}\n"
    },
    "contracts/interfaces/IDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IDistributor {\n    function totalShares() external view returns (uint256);\n\n    function recipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILiquidityGenerator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface ILiquidityGenerator {\n    function periodBegin() external pure returns (uint256);\n\n    function periodEnd() external pure returns (uint256);\n\n    function bonusEnd() external pure returns (uint256);\n\n    function distributor() external pure returns (address);\n\n    function bonusDistributor() external pure returns (address);\n\n    function distributorTotalShares() external view returns (uint256);\n\n    function bonusDistributorTotalShares() external view returns (uint256);\n\n    function distributorRecipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function bonusDistributorRecipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function deposit() external payable;\n\n    event Finalized(uint256 amountMendi, uint256 amountUSDC);\n\n    event Deposit(\n        address indexed sender,\n        uint256 amount,\n        uint256 distributorTotalShares,\n        uint256 bonusDistributorTotalShares,\n        uint256 newShares,\n        uint256 newBonusShares\n    );\n    event PostponeUnlockTimestamp(\n        uint256 prevUnlockTimestamp,\n        uint256 unlockTimestamp\n    );\n    event Delivered(uint256 amountPair0, uint256 amountPair1);\n}\n"
    },
    "contracts/interfaces/IMendi.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n//IERC20\ninterface IMendi {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IOwnedDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IOwnedDistributor {\n    function totalShares() external view returns (uint256);\n\n    function recipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function editRecipient(address account, uint256 shares) external;\n}\n"
    },
    "contracts/interfaces/IVelodromeGauge.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVelodromeGauge {\n    function deposit(uint256 amount, uint256 tokenId) external;\n\n    function withdrawAll() external;\n\n    function withdraw(uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function getReward(address account, address[] calldata tokens) external;\n}\n"
    },
    "contracts/interfaces/IVelodromePairFactory.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVelodromePairFactory {\n    function createPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external returns (address pair);\n\n    function getPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/IVelodromeRouter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVelodromeRouter {\n    function factory() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n}\n"
    },
    "contracts/interfaces/IVelodromeVoter.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVelodromeVoter {\n    function gauges(address _pool) external view returns (address);\n\n    function claimable(address _gauge) external view returns (uint256);\n\n    function createGauge(address _pool) external returns (address);\n\n    function whitelist(address token) external;\n\n    function distribute(address _gauge) external;\n\n    function vote(\n        uint256 tokenId,\n        address[] calldata _poolVote,\n        uint256[] calldata _weights\n    ) external;\n\n    function votes(\n        uint256 _tokenId,\n        address _pool\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVelodromeVotingEscrow.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IVelodromeVotingEscrow {\n    function balanceOf(address account) external view returns (uint256);\n\n    function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\n\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) external view returns (uint256 tokenId);\n\n    function getVotes(address account) external view returns (uint256);\n\n    function create_lock(\n        uint256 _value,\n        uint256 _lock_duration\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVester {\n    function segments() external view returns (uint256);\n\n    function vestingAmount() external view returns (uint256);\n\n    function vestingBegin() external view returns (uint256);\n\n    function vestingEnd() external view returns (uint256);\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n// a library for performing various math operations\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\n\nlibrary Math {\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/libraries/SafeToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface ERC20Interface {\n    function balanceOf(address user) external view returns (uint256);\n}\n\nlibrary SafeToken {\n    function myBalance(address token) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(address(this));\n    }\n\n    function balanceOf(\n        address token,\n        address user\n    ) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(user);\n    }\n\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeApprove\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransfer\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransferFrom\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"!safeTransferETH\");\n    }\n}\n"
    },
    "contracts/LiquidityGenerator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOwnedDistributor.sol\";\nimport \"./interfaces/IVelodromeGauge.sol\";\nimport \"./interfaces/IVelodromePairFactory.sol\";\nimport \"./interfaces/IVelodromeRouter.sol\";\nimport \"./interfaces/IVelodromeVoter.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeToken.sol\";\n\ncontract LiquidityGenerator {\n    using SafeMath for uint256;\n    using SafeToken for address;\n\n    struct ConstuctorParams {\n        address admin_;\n        address mendi_;\n        address usdc_;\n        address reservesManager_;\n        address distributor_;\n        address bonusDistributor_;\n        uint256 periodBegin_;\n        uint256 periodDuration_;\n        uint256 bonusDuration_;\n    }\n\n    address public immutable mendi;\n    address public immutable usdc;\n    address public immutable distributor;\n    address public immutable bonusDistributor;\n    uint256 public immutable periodBegin;\n    uint256 public immutable periodEnd;\n    uint256 public immutable bonusEnd;\n    bool public finalized = false;\n    bool public delivered = false;\n    address public admin;\n    address public pendingAdmin;\n    address public reservesManager;\n\n    event AdminChanged(address prevAdmin, address newAdmin);\n    event PendingAdminChanged(\n        address prevPendingAdmin,\n        address newPendingAdmin\n    );\n    event ReservesManagerChanged(\n        address prevReservesManager,\n        address newReservesManager\n    );\n    event Finalized(uint256 amountMendi, uint256 amountUSDC);\n    event Deposit(\n        address indexed sender,\n        uint256 amount,\n        uint256 distributorTotalShares,\n        uint256 bonusDistributorTotalShares,\n        uint256 newShares,\n        uint256 newBonusShares\n    );\n\n    constructor(ConstuctorParams memory params_) {\n        require(\n            params_.periodDuration_ > 0,\n            \"LiquidityGenerator: INVALID_PERIOD_DURATION\"\n        );\n        require(\n            params_.bonusDuration_ > 0 &&\n                params_.bonusDuration_ <= params_.periodDuration_,\n            \"LiquidityGenerator: INVALID_BONUS_DURATION\"\n        );\n        admin = params_.admin_;\n        mendi = params_.mendi_;\n        usdc = params_.usdc_;\n        reservesManager = params_.reservesManager_;\n        distributor = params_.distributor_;\n        bonusDistributor = params_.bonusDistributor_;\n        periodBegin = params_.periodBegin_;\n        periodEnd = params_.periodBegin_.add(params_.periodDuration_);\n        bonusEnd = params_.periodBegin_.add(params_.bonusDuration_);\n    }\n\n    function distributorTotalShares()\n        public\n        view\n        returns (uint256 totalShares)\n    {\n        return IOwnedDistributor(distributor).totalShares();\n    }\n\n    function bonusDistributorTotalShares()\n        public\n        view\n        returns (uint256 totalShares)\n    {\n        return IOwnedDistributor(bonusDistributor).totalShares();\n    }\n\n    function distributorRecipients(\n        address account\n    )\n        public\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\n    {\n        return IOwnedDistributor(distributor).recipients(account);\n    }\n\n    function bonusDistributorRecipients(\n        address account\n    )\n        public\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\n    {\n        return IOwnedDistributor(bonusDistributor).recipients(account);\n    }\n\n    function _setAdmin(address admin_) external {\n        require(msg.sender == admin, \"LiquidityGenerator: FORBIDDEN\");\n        require(admin_ != address(0), \"LiquidityGenerator: INVALID_ADDRESS\");\n        address prevPendingAdmin = pendingAdmin;\n        pendingAdmin = admin_;\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\n    }\n\n    function _acceptAdmin() external {\n        require(msg.sender == pendingAdmin, \"LiquidityGenerator: FORBIDDEN\");\n        address prevAdmin = admin;\n        address prevPendingAdmin = pendingAdmin;\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n        emit AdminChanged(prevAdmin, admin);\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\n    }\n\n    function _setReservesManager(address reservesManager_) external {\n        require(msg.sender == admin, \"LiquidityGenerator: FORBIDDEN\");\n        require(\n            reservesManager_ != address(0),\n            \"LiquidityGenerator: INVALID_ADDRESS\"\n        );\n        address prevReservesManager = reservesManager;\n        reservesManager = reservesManager_;\n        emit ReservesManagerChanged(prevReservesManager, reservesManager);\n    }\n\n    function finalize() public {\n        require(!finalized, \"LiquidityGenerator: FINALIZED\");\n        uint256 blockTimestamp = getBlockTimestamp();\n        require(blockTimestamp >= periodEnd, \"LiquidityGenerator: TOO_SOON\");\n\n        uint256 _amountMendi = mendi.myBalance();\n        uint256 _amountUSDC = usdc.balanceOf(reservesManager);\n\n        finalized = true;\n        emit Finalized(_amountMendi, _amountUSDC);\n    }\n\n    function deposit(uint256 amountUSDC) external payable {\n        uint256 blockTimestamp = getBlockTimestamp();\n        require(blockTimestamp >= periodBegin, \"LiquidityGenerator: TOO_SOON\");\n        require(blockTimestamp < periodEnd, \"LiquidityGenerator: TOO_LATE\");\n        require(amountUSDC >= 1e7, \"LiquidityGenerator: INVALID_VALUE\"); // minimum 10 USDC\n\n        // Pull usdc to reserves manager\n        usdc.safeTransferFrom(msg.sender, reservesManager, amountUSDC);\n\n        (uint256 _prevSharesBonus, , ) = IOwnedDistributor(bonusDistributor)\n            .recipients(msg.sender);\n        uint256 _newSharesBonus = _prevSharesBonus;\n        if (blockTimestamp < bonusEnd) {\n            _newSharesBonus = _prevSharesBonus.add(amountUSDC);\n            IOwnedDistributor(bonusDistributor).editRecipient(\n                msg.sender,\n                _newSharesBonus\n            );\n        }\n        (uint256 _prevShares, , ) = IOwnedDistributor(distributor).recipients(\n            msg.sender\n        );\n        uint256 _newShares = _prevShares.add(amountUSDC);\n        IOwnedDistributor(distributor).editRecipient(msg.sender, _newShares);\n        emit Deposit(\n            msg.sender,\n            amountUSDC,\n            distributorTotalShares(),\n            bonusDistributorTotalShares(),\n            _newShares,\n            _newSharesBonus\n        );\n    }\n\n    receive() external payable {\n        revert(\"LiquidityGenerator: BAD_CALL\");\n    }\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/Mendi.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Mendi is ERC20 {\n    constructor(address account) ERC20(\"Mendi Finance\", \"MENDI\") {\n        _mint(account, 100_000_000e18);\n    }\n}\n"
    },
    "contracts/OwnedDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./Distributor.sol\";\n\ncontract OwnedDistributor is Distributor {\n    address public admin;\n\n    event SetAdmin(address newAdmin);\n\n    constructor(\n        address mendi_,\n        address claimable_,\n        address admin_\n    ) Distributor(mendi_, claimable_) {\n        admin = admin_;\n    }\n\n    function editRecipient(address account, uint256 shares) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        editRecipientInternal(account, shares);\n    }\n\n    function editRecipients(\n        address[] memory accounts,\n        uint256[] memory shares\n    ) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        require(\n            accounts.length == shares.length,\n            \"OwnedDistributor: INVALID_INPUT\"\n        );\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            editRecipientInternal(accounts[i], shares[i]);\n        }\n    }\n\n    function setAdmin(address admin_) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        admin = admin_;\n        emit SetAdmin(admin_);\n    }\n}\n"
    },
    "contracts/test/MockClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IClaimable.sol\";\n\ncontract MockClaimable is IClaimable {\n    address public token;\n    address public recipient;\n\n    uint256 public claimPerSecond;\n    uint256 public lastClaim;\n\n    constructor(address token_, uint256 claimPerSecond_, uint256 lastClaim_) {\n        token = token_;\n        claimPerSecond = claimPerSecond_;\n        lastClaim = lastClaim_;\n    }\n\n    function claim() external override returns (uint256) {\n        if (lastClaim > block.timestamp) {\n            return 0;\n        }\n\n        require(\n            recipient == address(0) || recipient == msg.sender,\n            \"MockClaimable: not recipient\"\n        );\n\n        uint256 amount = claimPerSecond * (block.timestamp - lastClaim);\n        lastClaim = block.timestamp;\n        IERC20(token).transfer(recipient, amount);\n        return amount;\n    }\n\n    function setRecipient(address recipient_) external {\n        recipient = recipient_;\n    }\n}\n"
    },
    "contracts/test/MockERC20Token.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20Token is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(uint256 supply, uint8 decimals_) ERC20(\"MockERC20\", \"MCK\") {\n        _decimals = decimals_;\n\n        _mint(msg.sender, supply);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/utils/Multicall.sol": {
      "content": "pragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract Multicall2 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(\n        Call[] memory calls\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n            require(success, \"Multicall aggregate: call failed\");\n            returnData[i] = ret;\n        }\n    }\n\n    function blockAndAggregate(\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(\n            true,\n            calls\n        );\n    }\n\n    function getBlockHash(\n        uint256 blockNumber\n    ) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n\n    function getCurrentBlockDifficulty()\n        public\n        view\n        returns (uint256 difficulty)\n    {\n        difficulty = block.difficulty;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockTimestamp()\n        public\n        view\n        returns (uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n\n    function tryAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    ) public returns (Result[] memory returnData) {\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n\n            if (requireSuccess) {\n                require(success, \"Multicall2 aggregate: call failed\");\n            }\n\n            returnData[i] = Result(success, ret);\n        }\n    }\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        blockNumber = block.number;\n        blockHash = blockhash(block.number);\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}\n"
    },
    "contracts/Vester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IMendi.sol\";\nimport \"./interfaces/IClaimable.sol\";\nimport \"./interfaces/IVester.sol\";\n\ncontract Vester is IVester, IClaimable {\n    using SafeMath for uint256;\n\n    uint256 public constant override segments = 100;\n\n    address public immutable mendi;\n    address public recipient;\n\n    uint256 public immutable override vestingAmount;\n    uint256 public immutable override vestingBegin;\n    uint256 public immutable override vestingEnd;\n\n    uint256 public previousPoint;\n    uint256 public immutable finalPoint;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) {\n        require(vestingEnd_ > vestingBegin_, \"Vester: END_TOO_EARLY\");\n\n        mendi = mendi_;\n        recipient = recipient_;\n\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingEnd = vestingEnd_;\n\n        finalPoint = vestingCurve(1e18);\n    }\n\n    function vestingCurve(uint256 x) public pure virtual returns (uint256 y) {\n        uint256 speed = 1e18;\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\n            if (x < i + 1e16) return y + (speed * (x - i)) / 1e16;\n            y += speed;\n            speed = (speed * 976) / 1000;\n        }\n    }\n\n    function getUnlockedAmount() internal virtual returns (uint256 amount) {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve(\n            (blockTimestamp - vestingBegin).mul(1e18).div(\n                vestingEnd - vestingBegin\n            )\n        );\n        amount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(\n            finalPoint\n        );\n        previousPoint = currentPoint;\n    }\n\n    function claim() public virtual override returns (uint256 amount) {\n        require(msg.sender == recipient, \"Vester: UNAUTHORIZED\");\n        uint256 blockTimestamp = getBlockTimestamp();\n        if (blockTimestamp < vestingBegin) return 0;\n        if (blockTimestamp > vestingEnd) {\n            amount = IMendi(mendi).balanceOf(address(this));\n        } else {\n            amount = getUnlockedAmount();\n        }\n        if (amount > 0) IMendi(mendi).transfer(recipient, amount);\n    }\n\n    function setRecipient(address recipient_) public virtual {\n        require(msg.sender == recipient, \"Vester: UNAUTHORIZED\");\n        recipient = recipient_;\n    }\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/VesterCliff.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./Vester.sol\";\n\ncontract VesterCliff is Vester {\n    using SafeMath for uint256;\n\n    uint256 public immutable vestingCliff;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_,\n        uint256 vestingCliff_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {\n        require(\n            vestingCliff_ >= vestingBegin_,\n            \"VesterCliff::constructor: cliff is too early\"\n        );\n        require(\n            vestingCliff_ <= vestingEnd_,\n            \"VesterCliff::constructor: cliff is too late\"\n        );\n        vestingCliff = vestingCliff_;\n    }\n\n    function claim() public virtual override returns (uint256 amount) {\n        uint256 blockTimestamp = getBlockTimestamp();\n        if (blockTimestamp < vestingCliff) return 0;\n\n        amount = super.claim();\n    }\n}\n"
    },
    "contracts/VesterSale.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./Vester.sol\";\n\ncontract VesterSale is Vester {\n    using SafeMath for uint256;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n\n    function getUnlockedAmount()\n        internal\n        virtual\n        override\n        returns (uint256 amount)\n    {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve(\n            (blockTimestamp - vestingBegin).mul(1e18).div(\n                vestingEnd - vestingBegin\n            )\n        );\n        amount = vestingAmount\n            .mul(currentPoint.sub(previousPoint))\n            .div(finalPoint)\n            .mul(5)\n            .div(10);\n        if (previousPoint == 0 && currentPoint > 0) {\n            // distribute 50% on TGE\n            amount = amount.add(vestingAmount.div(2));\n        }\n        previousPoint = currentPoint;\n    }\n}\n"
    },
    "contracts/VesterStepped.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./Vester.sol\";\n\ncontract VesterStepped is Vester {\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n\n    function vestingCurve(\n        uint256 x\n    ) public pure virtual override returns (uint256 y) {\n        uint256 speed = 1e18;\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\n            if (x < i) return y;\n            y += speed;\n            speed = (speed * 976) / 1000;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}