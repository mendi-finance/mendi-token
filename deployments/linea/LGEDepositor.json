{
  "address": "0x8f1b13497326857011B0b9A2b066054E1849F14D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityGenerator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mendi_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdc_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vc_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HARVESTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "_recover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityGenerator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendiToken",
      "outputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendiUSDCPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendiUSDCPoolToken",
      "outputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vcToken",
      "outputs": [
        {
          "internalType": "Token",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7c005b8e783263644a03c099314eda76d3e4c88648bad085928c0efef7d7df1",
  "receipt": {
    "to": null,
    "from": "0x57cd331C7b2c7582625810465Ea3CF9bdcA21236",
    "contractAddress": "0x8f1b13497326857011B0b9A2b066054E1849F14D",
    "transactionIndex": 2,
    "gasUsed": "1876294",
    "logsBloom": "0x
    "blockHash": "0x52634581b6369c1c5b85c3f93b66a0d9b1d33abc719efeeb9dee805eadc6379f",
    "transactionHash": "0xb7c005b8e783263644a03c099314eda76d3e4c88648bad085928c0efef7d7df1",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 166557,
        "transactionHash": "0xb7c005b8e783263644a03c099314eda76d3e4c88648bad085928c0efef7d7df1",
        "address": "0x8f1b13497326857011B0b9A2b066054E1849F14D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057cd331c7b2c7582625810465ea3cf9bdca21236",
          "0x00000000000000000000000057cd331c7b2c7582625810465ea3cf9bdca21236"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x52634581b6369c1c5b85c3f93b66a0d9b1d33abc719efeeb9dee805eadc6379f"
      }
    ],
    "blockNumber": 166557,
    "cumulativeGasUsed": "2092845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x55231F67b289815483a037D459877D85819e9144",
    "0x1d0188c4B276A09366D05d6Be06aF61a73bC7535",
    "0xBe6c6A389b82306e88d74d1692B67285A9db9A47",
    "0x43E8809ea748EFf3204ee01F08872F063e44065f",
    "0x176211869ca2b568f2a7d4ee941e073a821ee1ff",
    "0xcc22F6AA610D1b2a0e89EF228079cB3e1831b1D1"
  ],
  "numDeployments": 1,
  "solcInputHash": "d64cd7ba315dfc138d7ff0705d878448",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityGenerator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mendi_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vc_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGenerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendiToken\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendiUSDCPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendiUSDCPoolToken\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vcToken\",\"outputs\":[{\"internalType\":\"Token\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LGEDepositor.sol\":\"LGEDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LGEDepositor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOwnedDistributor.sol\\\";\\nimport \\\"./interfaces/VelocoreInterfaces.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeToken.sol\\\";\\n\\ncontract LGEDepositor is AccessControl {\\n    using TokenLib for Token;\\n    using SafeToken for address;\\n\\n    address public immutable liquidityGenerator;\\n    IVault public immutable vault;\\n    IFactory public immutable factory;\\n    address public immutable mendi;\\n    address public immutable usdc;\\n    address public immutable vc;\\n\\n    Token public immutable mendiToken;\\n    Token public immutable usdcToken;\\n    Token public immutable vcToken;\\n    IPool public immutable mendiUSDCPool;\\n    Token public immutable mendiUSDCPoolToken;\\n\\n    uint256 finalizeAt;\\n    bool deposited;\\n\\n    uint8 constant SWAP = 0;\\n    uint8 constant GAUGE = 1;\\n\\n    uint8 constant EXACTLY = 0;\\n    uint8 constant AT_MOST = 1;\\n    uint8 constant ALL = 2;\\n\\n    bytes32 public HARVESTER_ROLE = keccak256(\\\"HARVESTER_ROLE\\\");\\n\\n    modifier onlyLG() {\\n        require(msg.sender == liquidityGenerator, \\\"LGEDepositor: ONLY_LG\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address liquidityGenerator_,\\n        IVault vault_,\\n        IFactory factory_,\\n        address mendi_,\\n        address usdc_,\\n        address vc_\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        liquidityGenerator = liquidityGenerator_;\\n        vault = vault_;\\n        factory = factory_;\\n        mendi = mendi_;\\n        usdc = usdc_;\\n        vc = vc_;\\n\\n        mendiToken = toToken(IERC20(mendi));\\n        usdcToken = toToken(IERC20(usdc));\\n        vcToken = toToken(IERC20(vc));\\n\\n        mendiUSDCPool = factory.pools(mendiToken, usdcToken);\\n        mendiUSDCPoolToken = toToken(IERC20(address(mendiUSDCPool)));\\n    }\\n\\n    function finalize() external onlyLG {\\n        finalizeAt = getBlockTimestamp();\\n    }\\n\\n    function deposit() external {\\n        require(finalizeAt > 0, \\\"LGEDepositor: NOT_FINALIZED\\\");\\n        require(\\n            mendi.balanceOf(address(this)) >= 2_500_000e18,\\n            \\\"LGEDepositor: NOT_ENOUGH_MENDI\\\"\\n        );\\n\\n        addLPInternal();\\n        stakeLPInternal();\\n\\n        deposited = true;\\n    }\\n\\n    function harvest(address to) external onlyRole(HARVESTER_ROLE) {\\n        require(deposited, \\\"LGEDepositor: NOT_DEPOSITED\\\");\\n\\n        harvestVCInternal();\\n\\n        sendAllInternal(vcToken, to);\\n    }\\n\\n    function withdraw(address to) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            getBlockTimestamp() > finalizeAt + 180 days,\\n            \\\"LGEDepositor: LP_LOCKED\\\"\\n        );\\n\\n        unstakeLPInternal();\\n\\n        sendAllInternal(mendiUSDCPoolToken, to);\\n    }\\n\\n    /* Internal Liquidity Functions */\\n\\n    function addLPInternal() internal {\\n        approveAllInternal(mendiToken, address(vault));\\n        approveAllInternal(usdcToken, address(vault));\\n\\n        run3Internal(\\n            0,\\n            mendiUSDCPool,\\n            SWAP,\\n            mendiToken,\\n            EXACTLY,\\n            int128(int256(mendiToken.addr().balanceOf(address(this)))),\\n            usdcToken,\\n            EXACTLY,\\n            int128(int256(usdcToken.addr().balanceOf(address(this)))),\\n            mendiUSDCPoolToken,\\n            AT_MOST,\\n            0\\n        );\\n\\n        removeApproveInternal(mendiToken, address(vault));\\n        removeApproveInternal(usdcToken, address(vault));\\n    }\\n\\n    function stakeLPInternal() internal {\\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\\n\\n        run2Internal(\\n            0,\\n            mendiUSDCPool,\\n            GAUGE,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this)))),\\n            vcToken,\\n            AT_MOST,\\n            0\\n        );\\n\\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\\n    }\\n\\n    function harvestVCInternal() internal {\\n        run1Internal(0, mendiUSDCPool, GAUGE, vcToken, AT_MOST, 0);\\n    }\\n\\n    function unstakeLPInternal() internal {\\n        uint256 stakedAmount = IGauge(address(mendiUSDCPool)).stakedTokens(\\n            address(this)\\n        )[0];\\n\\n        run2Internal(\\n            0,\\n            mendiUSDCPool,\\n            GAUGE,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            -(int128(uint128(stakedAmount))),\\n            vcToken,\\n            AT_MOST,\\n            0\\n        );\\n    }\\n\\n    function removeLPInternal() internal {\\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\\n\\n        run3Internal(\\n            0,\\n            mendiUSDCPool,\\n            SWAP,\\n            mendiToken,\\n            AT_MOST,\\n            0,\\n            usdcToken,\\n            AT_MOST,\\n            0,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this))))\\n        );\\n\\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\\n    }\\n\\n    function run1Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1\\n    ) internal {\\n        Token[] memory tokens = new Token[](1);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](1);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        vault.execute{value: value}(tokens, new int128[](1), ops);\\n    }\\n\\n    function run2Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1,\\n        Token t2,\\n        uint8 m2,\\n        int128 a2\\n    ) internal {\\n        Token[] memory tokens = new Token[](2);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n        tokens[1] = (t2);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](2);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        ops[0].tokenInformations[1] =\\n            bytes32(bytes1(0x01)) |\\n            bytes32(bytes2(uint16(m2))) |\\n            bytes32(uint256(uint128(uint256(int256(a2)))));\\n        vault.execute{value: value}(tokens, new int128[](2), ops);\\n    }\\n\\n    function run3Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1,\\n        Token t2,\\n        uint8 m2,\\n        int128 a2,\\n        Token t3,\\n        uint8 m3,\\n        int128 a3\\n    ) internal {\\n        Token[] memory tokens = new Token[](3);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n        tokens[1] = (t2);\\n        tokens[2] = (t3);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](3);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        ops[0].tokenInformations[1] =\\n            bytes32(bytes1(0x01)) |\\n            bytes32(bytes2(uint16(m2))) |\\n            bytes32(uint256(uint128(uint256(int256(a2)))));\\n        ops[0].tokenInformations[2] =\\n            bytes32(bytes1(0x02)) |\\n            bytes32(bytes2(uint16(m3))) |\\n            bytes32(uint256(uint128(uint256(int256(a3)))));\\n        vault.execute{value: value}(tokens, new int128[](3), ops);\\n    }\\n\\n    /* Internal Helper Functions */\\n\\n    function sendAllInternal(Token token, address to) internal {\\n        token.addr().safeTransfer(to, token.addr().balanceOf(address(this)));\\n    }\\n\\n    function approveAllInternal(Token token, address spender) internal {\\n        token.addr().safeApprove(\\n            spender,\\n            token.addr().balanceOf(address(this))\\n        );\\n    }\\n\\n    function removeApproveInternal(Token token, address spender) internal {\\n        token.addr().safeApprove(spender, 0);\\n    }\\n\\n    /* Admin Functions */\\n\\n    function _recover(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            finalizeAt == 0 || getBlockTimestamp() > finalizeAt + 7 days,\\n            \\\"LGEDepositor: NOT_RECOVER_TIME\\\"\\n        );\\n        uint256 amount = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /* Misc Functions */\\n\\n    function getBlockTimestamp() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x08ed97bac75625614fceb7ed1f3a90a83c18c84c7012872ef0a558d4983e668a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x05518f83669350f0080acdb26dbbc21963b595caf2ad42bb22283f0733ffc4a6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOwnedDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IOwnedDistributor {\\n    function totalShares() external view returns (uint256);\\n\\n    function recipients(\\n        address\\n    )\\n        external\\n        view\\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\\n\\n    function editRecipient(address account, uint256 shares) external;\\n}\\n\",\"keccak256\":\"0x5ffd3fe040928b44897f30cacc097cc257cfafd5e05882fb85b9cc0cc77ae720\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/VelocoreInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nbytes32 constant TOKEN_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nbytes32 constant ID_MASK = 0x00FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n\\nuint256 constant ID_SHIFT = 160;\\nbytes32 constant TOKENSPEC_MASK = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n\\ntype Token is bytes32;\\ntype TokenSpecType is bytes32;\\n\\nlibrary TokenSpec {\\n    TokenSpecType constant ERC20 =\\n        TokenSpecType.wrap(\\n            0x0000000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant ERC721 =\\n        TokenSpecType.wrap(\\n            0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant ERC1155 =\\n        TokenSpecType.wrap(\\n            0x0200000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant NATIVE =\\n        TokenSpecType.wrap(\\n            0xEE00000000000000000000000000000000000000000000000000000000000000\\n        );\\n}\\n\\nlibrary TokenLib {\\n    using TokenLib for Token;\\n    using TokenLib for bytes32;\\n\\n    function wrap(bytes32 data) internal pure returns (Token) {\\n        return Token.wrap(data);\\n    }\\n\\n    function unwrap(Token tok) internal pure returns (bytes32) {\\n        return Token.unwrap(tok);\\n    }\\n\\n    function addr(Token tok) internal pure returns (address) {\\n        return address(uint160(uint256(tok.unwrap() & TOKEN_MASK)));\\n    }\\n\\n    function id(Token tok) internal pure returns (uint256) {\\n        return uint256((tok.unwrap() & ID_MASK) >> ID_SHIFT);\\n    }\\n\\n    function spec(Token tok) internal pure returns (TokenSpecType) {\\n        return TokenSpecType.wrap(tok.unwrap() & TOKENSPEC_MASK);\\n    }\\n}\\n\\nfunction toToken(IERC20 tok) pure returns (Token) {\\n    return Token.wrap(bytes32(uint256(uint160(address(tok)))));\\n}\\n\\nfunction toToken(\\n    TokenSpecType spec_,\\n    uint88 id_,\\n    address addr_\\n) pure returns (Token) {\\n    return\\n        Token.wrap(\\n            TokenSpecType.unwrap(spec_) |\\n                bytes32((bytes32(uint256(id_)) << ID_SHIFT) & ID_MASK) |\\n                bytes32(uint256(uint160(addr_)))\\n        );\\n}\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\\ninterface IPool {\\n    function poolParams() external view returns (bytes memory);\\n}\\n\\ninterface ISwap is IPool {\\n    function velocore__execute(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external returns (int128[] memory, int128[] memory);\\n\\n    function swapType() external view returns (string memory);\\n\\n    function listedTokens() external view returns (Token[] memory);\\n\\n    function lpTokens() external view returns (Token[] memory);\\n\\n    function underlyingTokens(Token lp) external view returns (Token[] memory);\\n    //function spotPrice(Token token, Token base) external view returns (uint256);\\n}\\n\\ninterface IGauge is IPool {\\n    /**\\n     * @dev This method is called by Vault.execute().\\n     * the parameters and return values are the same as velocore__execute.\\n     * The only difference is that the vault will call velocore__emission before calling velocore__gauge.\\n     */\\n    function velocore__gauge(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external returns (int128[] memory deltaGauge, int128[] memory deltaPool);\\n\\n    /**\\n     * @dev This method is called by Vault.execute() before calling velocore__emission or changing votes.\\n     *\\n     * The vault will credit emitted VC into the gauge balance.\\n     * IGauge is expected to update its internal ledger.\\n     * @param newEmissions newly emitted VCs since last emission\\n     */\\n    function velocore__emission(uint256 newEmissions) external;\\n\\n    function stakeableTokens() external view returns (Token[] memory);\\n\\n    function stakedTokens(\\n        address user\\n    ) external view returns (uint256[] memory);\\n\\n    function stakedTokens() external view returns (uint256[] memory);\\n\\n    function emissionShare(address user) external view returns (uint256);\\n\\n    function naturalBribes() external view returns (Token[] memory);\\n}\\n\\ninterface IConverter {\\n    /**\\n     * @dev This method is called by Vault.execute().\\n     * Vault will transfer any positively specified amounts directly to the IConverter before calling velocore__convert.\\n     *\\n     * Instead of returning balance delta numbers, IConverter is expected to directly transfer outputs back to vault.\\n     * Vault will measure the difference, and credit the user.\\n     */\\n    function velocore__convert(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBribe is IPool {\\n    /**\\n     * @dev This method is called when someone vote/harvest from/to a @param gauge,\\n     * and when this IBribe happens to be attached to the gauge.\\n     *\\n     * Attachment can happen without IBribe's permission. Implementations must verify that @param gauge is correct.\\n     *\\n     * Returns balance deltas; their net differences are credited as bribe.\\n     * deltaExternal must be zero or negative; Vault will take specified amounts from the contract's balance\\n     *\\n     * @param  gauge  the gauge to bribe for.\\n     * @param  elapsed  elapsed time after last call; can be used to save gas.\\n     */\\n    function velocore__bribe(\\n        IGauge gauge,\\n        uint256 elapsed\\n    )\\n        external\\n        returns (\\n            Token[] memory bribeTokens,\\n            int128[] memory deltaGauge,\\n            int128[] memory deltaPool,\\n            int128[] memory deltaExternal\\n        );\\n\\n    function bribeTokens(IGauge gauge) external view returns (Token[] memory);\\n\\n    function bribeRates(IGauge gauge) external view returns (uint256[] memory);\\n}\\n\\ninterface IFacet {\\n    function initializeFacet() external;\\n}\\n\\ninterface IFactory {\\n    function pools(Token quote, Token base) external view returns (IPool pool);\\n}\\n\\nstruct VelocoreOperation {\\n    bytes32 poolId;\\n    bytes32[] tokenInformations;\\n    bytes data;\\n}\\n\\ninterface IVault {\\n    event Swap(\\n        ISwap indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Gauge(\\n        IGauge indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Convert(\\n        IConverter indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Vote(IGauge indexed pool, address indexed user, int256 voteDelta);\\n    event UserBalance(\\n        address indexed to,\\n        address indexed from,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event BribeAttached(IGauge indexed gauge, IBribe indexed bribe);\\n    event BribeKilled(IGauge indexed gauge, IBribe indexed bribe);\\n    event GaugeKilled(IGauge indexed gauge, bool killed);\\n\\n    function notifyInitialSupply(Token, uint128, uint128) external;\\n\\n    function attachBribe(IGauge gauge, IBribe bribe) external;\\n\\n    function killBribe(IGauge gauge, IBribe bribe) external;\\n\\n    function killGauge(IGauge gauge, bool t) external;\\n\\n    function ballotToken() external returns (Token);\\n\\n    function emissionToken() external returns (Token);\\n\\n    function execute(\\n        Token[] calldata tokenRef,\\n        int128[] memory deposit,\\n        VelocoreOperation[] calldata ops\\n    ) external payable;\\n\\n    function query(\\n        address user,\\n        Token[] calldata tokenRef,\\n        int128[] memory deposit,\\n        VelocoreOperation[] calldata ops\\n    ) external returns (int128[] memory);\\n\\n    function admin_setFunctions(\\n        address implementation,\\n        bytes4[] calldata sigs\\n    ) external;\\n\\n    function admin_addFacet(IFacet implementation) external;\\n\\n    function admin_setAuthorizer(IAuthorizer auth_) external;\\n\\n    function inspect(address lens, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0x5e9ea97888ff7c1fc32d5ddbbea61eea4218d0d5aac5cb62d6821cfd8aae1a62\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xde5f9aeade0af65f0bb5360faa681743e75e9692e87ac94389dc40ee28756bbb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface ERC20Interface {\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\\nlibrary SafeToken {\\n    function myBalance(address token) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(address(this));\\n    }\\n\\n    function balanceOf(\\n        address token,\\n        address user\\n    ) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(user);\\n    }\\n\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferETH\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb8d215aab7e034207135c7eb3165a9da8723f6ce1536b4c330d7ae316ea74f23\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80635f33f281116100de578063a217fddf11610097578063c45a015511610071578063c45a0155146103db578063d0e30db014610402578063d547741f1461040a578063fbfa77cf1461041d57600080fd5b8063a217fddf14610399578063ba4af753146103a1578063bab56ac3146103b457600080fd5b80635f33f2811461030257806363a560ec1461032957806378f93bf414610332578063796b89b9146103595780637fbf33991461035f57806391d148541461038657600080fd5b80632512c108116101305780632512c108146102735780632f2ff15d1461029a57806336568abe146102ad5780633e413bee146102c05780634bb278f3146102e757806351cff8d9146102ef57600080fd5b806301ffc9a71461017857806303851ea9146101a05780630e5c011e146101d557806311eac855146101ea578063188cdb3714610211578063248a9ca314610250575b600080fd5b61018b610186366004611b31565b610444565b60405190151581526020015b60405180910390f35b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610197565b6101e86101e3366004611b77565b61047b565b005b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b6101c761025e366004611b92565b60009081526020819052604090206001015490565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6101e86102a8366004611bab565b610514565b6101e86102bb366004611bab565b61053e565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6101e86105b8565b6101e86102fd366004611b77565b61062e565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6101c760035481565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b426101c7565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b61018b610394366004611bab565b6106c9565b6101c7600081565b6101e86103af366004611b77565b6106f2565b6101c77f000000000000000000000000000000000000000000000000000000000000000081565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b6101e8610791565b6101e8610418366004611bab565b61088f565b6102387f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061047557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600354610487816108b4565b60025460ff166104de5760405162461bcd60e51b815260206004820152601b60248201527f4c47454465706f7369746f723a204e4f545f4445504f5349544544000000000060448201526064015b60405180910390fd5b6104e66108c1565b6105107f000000000000000000000000000000000000000000000000000000000000000083610915565b5050565b60008281526020819052604090206001015461052f816108b4565b6105398383610948565b505050565b6001600160a01b03811633146105ae5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104d5565b61051082826109cc565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106285760405162461bcd60e51b81526020600482015260156024820152744c47454465706f7369746f723a204f4e4c595f4c4760581b60448201526064016104d5565b42600155565b6000610639816108b4565b6001546106499062ed4e00611bed565b42116106975760405162461bcd60e51b815260206004820152601760248201527f4c47454465706f7369746f723a204c505f4c4f434b454400000000000000000060448201526064016104d5565b61069f610a31565b6105107f000000000000000000000000000000000000000000000000000000000000000083610915565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006106fd816108b4565b600154158061071a57506001546107179062093a80611bed565b42115b6107665760405162461bcd60e51b815260206004820152601e60248201527f4c47454465706f7369746f723a204e4f545f5245434f5645525f54494d45000060448201526064016104d5565b600061077b6001600160a01b03841630610b5b565b90506105396001600160a01b0384163383610bd0565b6000600154116107e35760405162461bcd60e51b815260206004820152601b60248201527f4c47454465706f7369746f723a204e4f545f46494e414c495a4544000000000060448201526064016104d5565b6a02116545850052128000006108226001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630610b5b565b10156108705760405162461bcd60e51b815260206004820152601e60248201527f4c47454465706f7369746f723a204e4f545f454e4f5547485f4d454e4449000060448201526064016104d5565b610878610cdb565b610880610ebf565b6002805460ff19166001179055565b6000828152602081905260409020600101546108aa816108b4565b61053983836109cc565b6108be8133610fb0565b50565b61091360007f000000000000000000000000000000000000000000000000000000000000000060017f000000000000000000000000000000000000000000000000000000000000000060016000611009565b565b61051081610937306001600160a01b0386165b6001600160a01b031690610b5b565b6001600160a01b0385169190610bd0565b61095282826106c9565b610510576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556109883390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6109d682826106c9565b15610510576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60405163a5b39cfb60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a5b39cfb90602401600060405180830381865afa158015610a98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac09190810190611c1b565b600081518110610ad257610ad2611cd9565b602002602001015190506108be60007f000000000000000000000000000000000000000000000000000000000000000060017f0000000000000000000000000000000000000000000000000000000000000000600086610b3190611cef565b7f000000000000000000000000000000000000000000000000000000000000000060016000611244565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190611d1f565b9392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610c2c9190611d68565b6000604051808303816000865af19150503d8060008114610c69576040519150601f19603f3d011682016040523d82523d6000602084013e610c6e565b606091505b5091509150818015610c98575080511580610c98575080806020019051810190610c989190611d84565b610cd45760405162461bcd60e51b815260206004820152600d60248201526c10b9b0b332aa3930b739b332b960991b60448201526064016104d5565b5050505050565b610d257f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006114fc565b610d6f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006114fc565b610e2b60007f0000000000000000000000000000000000000000000000000000000000000000817f000000000000000000000000000000000000000000000000000000000000000081610dcb306001600160a01b038416610928565b7f00000000000000000000000000000000000000000000000000000000000000006000610e01306001600160a01b038416610928565b7f00000000000000000000000000000000000000000000000000000000000000006001600061152e565b610e757f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061186b565b6109137f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061186b565b610f097f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006114fc565b610f6660007f000000000000000000000000000000000000000000000000000000000000000060017f000000000000000000000000000000000000000000000000000000000000000083610b31306001600160a01b038416610928565b6109137f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061186b565b610fba82826106c9565b61051057610fc781611880565b610fd2836020611892565b604051602001610fe3929190611da6565b60408051601f198184030181529082905262461bcd60e51b82526104d591600401611e47565b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602082015b6040805160608082018352600082526020808301829052928201528252600019909201910181611043579050509050848260008151811061108657611086611cd9565b602002602001018181525050866001600160a01b031660001b8660f81b6001600160f81b03191617816000815181106110c1576110c1611cd9565b60209081029190910101515260408051600180825281830190925290816020016020820280368337019050508160008151811061110057611100611cd9565b602002602001015160200181905250604051806020016040528060008152508160008151811061113257611132611cd9565b602090810291909101015160400152805160ff60f01b60f086901b166001600160801b0385161790829060009061116b5761116b611cd9565b60200260200101516020015160008151811061118957611189611cd9565b60209081029190910101526040805160018082528183019092527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163d3115a8a918b9186919081602001602082028036833701905050856040518563ffffffff1660e01b815260040161120893929190611f07565b6000604051808303818588803b15801561122157600080fd5b505af1158015611235573d6000803e3d6000fd5b50505050505050505050505050565b60408051600280825260608201835260009260208301908036833750506040805160018082528183019092529293506000929150602082015b604080516060808201835260008252602080830182905292820152825260001990920191018161127d57905050905087826000815181106112c0576112c0611cd9565b60200260200101818152505084826001815181106112e0576112e0611cd9565b602002602001018181525050896001600160a01b031660001b8960f81b6001600160f81b031916178160008151811061131b5761131b611cd9565b6020908102919091010151526040805160028082526060820190925290816020016020820280368337019050508160008151811061135b5761135b611cd9565b602002602001015160200181905250604051806020016040528060008152508160008151811061138d5761138d611cd9565b602090810291909101015160400152805160ff60f01b60f089901b166001600160801b038816179082906000906113c6576113c6611cd9565b6020026020010151602001516000815181106113e4576113e4611cd9565b6020908102919091010152805160ff60f01b60f086901b166001600160801b03851617600160f81b1790829060009061141f5761141f611cd9565b60200260200101516020015160018151811061143d5761143d611cd9565b6020908102919091010152604080516002808252606082019092527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163d3115a8a918e9186919081602001602082028036833701905050856040518563ffffffff1660e01b81526004016114bd93929190611f07565b6000604051808303818588803b1580156114d657600080fd5b505af11580156114ea573d6000803e3d6000fd5b50505050505050505050505050505050565b61051081611513306001600160a01b038616610928565b6001600160a01b0385165b6001600160a01b03169190611a2e565b604080516003808252608082019092526000916020820160608036833750506040805160018082528183019092529293506000929150602082015b60408051606080820183526000825260208083018290529282015282526000199092019101816115695790505090508a826000815181106115ac576115ac611cd9565b60200260200101818152505087826001815181106115cc576115cc611cd9565b60200260200101818152505084826002815181106115ec576115ec611cd9565b6020026020010181815250508c6001600160a01b031660001b8c60f81b6001600160f81b031916178160008151811061162757611627611cd9565b6020908102919091010151526040805160038082526080820190925290816020016020820280368337019050508160008151811061166757611667611cd9565b602002602001015160200181905250604051806020016040528060008152508160008151811061169957611699611cd9565b602090810291909101015160400152805160ff60f01b60f08c901b166001600160801b038b16179082906000906116d2576116d2611cd9565b6020026020010151602001516000815181106116f0576116f0611cd9565b6020908102919091010152805160ff60f01b60f089901b166001600160801b03881617600160f81b1790829060009061172b5761172b611cd9565b60200260200101516020015160018151811061174957611749611cd9565b6020908102919091010152805160ff60f01b60f086901b166001600160801b03851617600160f91b1790829060009061178457611784611cd9565b6020026020010151602001516002815181106117a2576117a2611cd9565b60209081029190910101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d3115a8a8f846003604051908082528060200260200182016040528015611809578160200160208202803683370190505b50856040518563ffffffff1660e01b815260040161182993929190611f07565b6000604051808303818588803b15801561184257600080fd5b505af1158015611856573d6000803e3d6000fd5b50505050505050505050505050505050505050565b6105108160006001600160a01b03851661151e565b60606104756001600160a01b03831660145b606060006118a1836002611f8c565b6118ac906002611bed565b67ffffffffffffffff8111156118c4576118c4611c05565b6040519080825280601f01601f1916602001820160405280156118ee576020820181803683370190505b509050600360fc1b8160008151811061190957611909611cd9565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061193857611938611cd9565b60200101906001600160f81b031916908160001a905350600061195c846002611f8c565b611967906001611bed565b90505b60018111156119df576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061199b5761199b611cd9565b1a60f81b8282815181106119b1576119b1611cd9565b60200101906001600160f81b031916908160001a90535060049490941c936119d881611fab565b905061196a565b508315610bc95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104d5565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611a8a9190611d68565b6000604051808303816000865af19150503d8060008114611ac7576040519150601f19603f3d011682016040523d82523d6000602084013e611acc565b606091505b5091509150818015611af6575080511580611af6575080806020019051810190611af69190611d84565b610cd45760405162461bcd60e51b815260206004820152600c60248201526b2173616665417070726f766560a01b60448201526064016104d5565b600060208284031215611b4357600080fd5b81356001600160e01b031981168114610bc957600080fd5b80356001600160a01b0381168114611b7257600080fd5b919050565b600060208284031215611b8957600080fd5b610bc982611b5b565b600060208284031215611ba457600080fd5b5035919050565b60008060408385031215611bbe57600080fd5b82359150611bce60208401611b5b565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611c0057611c00611bd7565b500190565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215611c2e57600080fd5b825167ffffffffffffffff80821115611c4657600080fd5b818501915085601f830112611c5a57600080fd5b815181811115611c6c57611c6c611c05565b8060051b604051601f19603f83011681018181108582111715611c9157611c91611c05565b604052918252848201925083810185019188831115611caf57600080fd5b938501935b82851015611ccd57845184529385019392850192611cb4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600081600f0b6f7fffffffffffffffffffffffffffffff19811415611d1657611d16611bd7565b60000392915050565b600060208284031215611d3157600080fd5b5051919050565b60005b83811015611d53578181015183820152602001611d3b565b83811115611d62576000848401525b50505050565b60008251611d7a818460208701611d38565b9190910192915050565b600060208284031215611d9657600080fd5b81518015158114610bc957600080fd5b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611dde816017850160208801611d38565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611e0f816028840160208801611d38565b01602801949350505050565b60008151808452611e33816020860160208601611d38565b601f01601f19169290920160200192915050565b602081526000610bc96020830184611e1b565b6000815180845260208085019450848260051b86018286016000805b86811015611ef9578484038a528251805185528681015160608887018190528151908701819052608087019189019085905b80821015611ec85782518452928a0192918a019160019190910190611ea8565b50505060408083015192508682038188015250611ee58183611e1b565b9b88019b9550505091850191600101611e76565b509198975050505050505050565b606080825284519082018190526000906020906080840190828801845b82811015611f4057815184529284019290840190600101611f24565b5050508381038285015285518082528683019183019060005b81811015611f78578351600f0b83529284019291840191600101611f59565b50508481036040860152611ccd8187611e5a565b6000816000190483118215151615611fa657611fa6611bd7565b500290565b600081611fba57611fba611bd7565b50600019019056fea26469706673582212206cc4793a62bfd9e5c5b65f3cc61e87e770a423a735de682a17e99bc803112d5964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LGEDepositor.sol:LGEDepositor",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2848,
        "contract": "contracts/LGEDepositor.sol:LGEDepositor",
        "label": "finalizeAt",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2850,
        "contract": "contracts/LGEDepositor.sol:LGEDepositor",
        "label": "deposited",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2870,
        "contract": "contracts/LGEDepositor.sol:LGEDepositor",
        "label": "HARVESTER_ROLE",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LGEDepositor.sol:LGEDepositor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LGEDepositor.sol:LGEDepositor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}