{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Distributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IMendi.sol\";\nimport \"./interfaces/IClaimable.sol\";\n\nabstract contract Distributor is IClaimable {\n    using SafeMath for uint256;\n\n    uint256 public constant MANTISSA2 = 2 ** 160;\n\n    address public immutable mendi;\n    address public immutable claimable;\n\n    struct Recipient {\n        uint256 shares;\n        uint256 lastShareIndex;\n        uint256 credit;\n    }\n    mapping(address => Recipient) public recipients;\n\n    uint256 public totalShares;\n    uint256 public shareIndex;\n\n    event UpdateShareIndex(uint256 shareIndex);\n    event UpdateCredit(\n        address indexed account,\n        uint256 lastShareIndex,\n        uint256 credit\n    );\n    event EditRecipient(\n        address indexed account,\n        uint256 shares,\n        uint256 totalShares\n    );\n\n    constructor(address mendi_, address claimable_) {\n        mendi = mendi_;\n        claimable = claimable_;\n    }\n\n    function updateShareIndex()\n        public\n        virtual\n        nonReentrant\n        returns (uint256 _shareIndex)\n    {\n        if (totalShares == 0) return shareIndex;\n        uint256 amount = IClaimable(claimable).claim();\n        if (amount == 0) return shareIndex;\n\n        _shareIndex = amount.mul(MANTISSA2).div(totalShares).add(shareIndex);\n        shareIndex = _shareIndex;\n        emit UpdateShareIndex(_shareIndex);\n    }\n\n    function updateCredit(address account) public returns (uint256 credit) {\n        uint256 _shareIndex = updateShareIndex();\n        if (_shareIndex == 0) return 0;\n        Recipient storage recipient = recipients[account];\n        credit =\n            recipient.credit +\n            _shareIndex.sub(recipient.lastShareIndex).mul(recipient.shares) /\n            MANTISSA2;\n        recipient.lastShareIndex = _shareIndex;\n        recipient.credit = credit;\n        emit UpdateCredit(account, _shareIndex, credit);\n    }\n\n    function claimInternal(\n        address account\n    ) internal virtual returns (uint256 amount) {\n        amount = updateCredit(account);\n        if (amount > 0) {\n            recipients[account].credit = 0;\n            IMendi(mendi).transfer(account, amount);\n            emit Claim(account, amount);\n        }\n    }\n\n    function claim() external virtual override returns (uint256 amount) {\n        return claimInternal(msg.sender);\n    }\n\n    function editRecipientInternal(address account, uint256 shares) internal {\n        updateCredit(account);\n        Recipient storage recipient = recipients[account];\n        uint256 prevShares = recipient.shares;\n        uint256 _totalShares = shares > prevShares\n            ? totalShares.add(shares - prevShares)\n            : totalShares.sub(prevShares - shares);\n        totalShares = _totalShares;\n        recipient.shares = shares;\n        emit EditRecipient(account, shares, _totalShares);\n    }\n\n    // Prevents a contract from calling itself, directly or indirectly.\n    bool internal _notEntered = true;\n    modifier nonReentrant() {\n        require(_notEntered, \"Distributor: REENTERED\");\n        _notEntered = false;\n        _;\n        _notEntered = true;\n    }\n}\n"
    },
    "contracts/interfaces/IClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface IClaimable {\n    function claim() external returns (uint256 amount);\n\n    event Claim(address indexed account, uint256 amount);\n}\n"
    },
    "contracts/interfaces/IDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IDistributor {\n    function totalShares() external view returns (uint256);\n\n    function recipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ILiquidityGenerator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface ILiquidityGenerator {\n    function periodBegin() external pure returns (uint256);\n\n    function periodEnd() external pure returns (uint256);\n\n    function bonusEnd() external pure returns (uint256);\n\n    function distributor() external pure returns (address);\n\n    function bonusDistributor() external pure returns (address);\n\n    function distributorTotalShares() external view returns (uint256);\n\n    function bonusDistributorTotalShares() external view returns (uint256);\n\n    function distributorRecipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function bonusDistributorRecipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function deposit() external payable;\n\n    event Finalized(uint256 amountMendi, uint256 amountUSDC);\n\n    event Deposit(\n        address indexed sender,\n        uint256 amount,\n        uint256 distributorTotalShares,\n        uint256 bonusDistributorTotalShares,\n        uint256 newShares,\n        uint256 newBonusShares\n    );\n    event PostponeUnlockTimestamp(\n        uint256 prevUnlockTimestamp,\n        uint256 unlockTimestamp\n    );\n    event Delivered(uint256 amountPair0, uint256 amountPair1);\n}\n"
    },
    "contracts/interfaces/IMendi.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n//IERC20\ninterface IMendi {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IOwnedDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IOwnedDistributor {\n    function totalShares() external view returns (uint256);\n\n    function recipients(\n        address\n    )\n        external\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\n\n    function editRecipient(address account, uint256 shares) external;\n}\n"
    },
    "contracts/interfaces/IVester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.5.0;\n\ninterface IVester {\n    function segments() external view returns (uint256);\n\n    function vestingAmount() external view returns (uint256);\n\n    function vestingBegin() external view returns (uint256);\n\n    function vestingEnd() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/VelocoreInterfaces.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\nbytes32 constant TOKEN_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\nbytes32 constant ID_MASK = 0x00FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\n\nuint256 constant ID_SHIFT = 160;\nbytes32 constant TOKENSPEC_MASK = 0xFF00000000000000000000000000000000000000000000000000000000000000;\n\ntype Token is bytes32;\ntype TokenSpecType is bytes32;\n\nlibrary TokenSpec {\n    TokenSpecType constant ERC20 =\n        TokenSpecType.wrap(\n            0x0000000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant ERC721 =\n        TokenSpecType.wrap(\n            0x0100000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant ERC1155 =\n        TokenSpecType.wrap(\n            0x0200000000000000000000000000000000000000000000000000000000000000\n        );\n\n    TokenSpecType constant NATIVE =\n        TokenSpecType.wrap(\n            0xEE00000000000000000000000000000000000000000000000000000000000000\n        );\n}\n\nlibrary TokenLib {\n    using TokenLib for Token;\n    using TokenLib for bytes32;\n\n    function wrap(bytes32 data) internal pure returns (Token) {\n        return Token.wrap(data);\n    }\n\n    function unwrap(Token tok) internal pure returns (bytes32) {\n        return Token.unwrap(tok);\n    }\n\n    function addr(Token tok) internal pure returns (address) {\n        return address(uint160(uint256(tok.unwrap() & TOKEN_MASK)));\n    }\n\n    function id(Token tok) internal pure returns (uint256) {\n        return uint256((tok.unwrap() & ID_MASK) >> ID_SHIFT);\n    }\n\n    function spec(Token tok) internal pure returns (TokenSpecType) {\n        return TokenSpecType.wrap(tok.unwrap() & TOKENSPEC_MASK);\n    }\n}\n\nfunction toToken(IERC20 tok) pure returns (Token) {\n    return Token.wrap(bytes32(uint256(uint160(address(tok)))));\n}\n\nfunction toToken(\n    TokenSpecType spec_,\n    uint88 id_,\n    address addr_\n) pure returns (Token) {\n    return\n        Token.wrap(\n            TokenSpecType.unwrap(spec_) |\n                bytes32((bytes32(uint256(id_)) << ID_SHIFT) & ID_MASK) |\n                bytes32(uint256(uint160(addr_)))\n        );\n}\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n\ninterface IPool {\n    function poolParams() external view returns (bytes memory);\n}\n\ninterface ISwap is IPool {\n    function velocore__execute(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external returns (int128[] memory, int128[] memory);\n\n    function swapType() external view returns (string memory);\n\n    function listedTokens() external view returns (Token[] memory);\n\n    function lpTokens() external view returns (Token[] memory);\n\n    function underlyingTokens(Token lp) external view returns (Token[] memory);\n    //function spotPrice(Token token, Token base) external view returns (uint256);\n}\n\ninterface IGauge is IPool {\n    /**\n     * @dev This method is called by Vault.execute().\n     * the parameters and return values are the same as velocore__execute.\n     * The only difference is that the vault will call velocore__emission before calling velocore__gauge.\n     */\n    function velocore__gauge(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external returns (int128[] memory deltaGauge, int128[] memory deltaPool);\n\n    /**\n     * @dev This method is called by Vault.execute() before calling velocore__emission or changing votes.\n     *\n     * The vault will credit emitted VC into the gauge balance.\n     * IGauge is expected to update its internal ledger.\n     * @param newEmissions newly emitted VCs since last emission\n     */\n    function velocore__emission(uint256 newEmissions) external;\n\n    function stakeableTokens() external view returns (Token[] memory);\n\n    function stakedTokens(\n        address user\n    ) external view returns (uint256[] memory);\n\n    function stakedTokens() external view returns (uint256[] memory);\n\n    function emissionShare(address user) external view returns (uint256);\n\n    function naturalBribes() external view returns (Token[] memory);\n}\n\ninterface IConverter {\n    /**\n     * @dev This method is called by Vault.execute().\n     * Vault will transfer any positively specified amounts directly to the IConverter before calling velocore__convert.\n     *\n     * Instead of returning balance delta numbers, IConverter is expected to directly transfer outputs back to vault.\n     * Vault will measure the difference, and credit the user.\n     */\n    function velocore__convert(\n        address user,\n        Token[] calldata tokens,\n        int128[] memory amounts,\n        bytes calldata data\n    ) external;\n}\n\ninterface IBribe is IPool {\n    /**\n     * @dev This method is called when someone vote/harvest from/to a @param gauge,\n     * and when this IBribe happens to be attached to the gauge.\n     *\n     * Attachment can happen without IBribe's permission. Implementations must verify that @param gauge is correct.\n     *\n     * Returns balance deltas; their net differences are credited as bribe.\n     * deltaExternal must be zero or negative; Vault will take specified amounts from the contract's balance\n     *\n     * @param  gauge  the gauge to bribe for.\n     * @param  elapsed  elapsed time after last call; can be used to save gas.\n     */\n    function velocore__bribe(\n        IGauge gauge,\n        uint256 elapsed\n    )\n        external\n        returns (\n            Token[] memory bribeTokens,\n            int128[] memory deltaGauge,\n            int128[] memory deltaPool,\n            int128[] memory deltaExternal\n        );\n\n    function bribeTokens(IGauge gauge) external view returns (Token[] memory);\n\n    function bribeRates(IGauge gauge) external view returns (uint256[] memory);\n}\n\ninterface IFacet {\n    function initializeFacet() external;\n}\n\ninterface IFactory {\n    function pools(Token quote, Token base) external view returns (IPool pool);\n}\n\nstruct VelocoreOperation {\n    bytes32 poolId;\n    bytes32[] tokenInformations;\n    bytes data;\n}\n\ninterface IVault {\n    event Swap(\n        ISwap indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Gauge(\n        IGauge indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Convert(\n        IConverter indexed pool,\n        address indexed user,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event Vote(IGauge indexed pool, address indexed user, int256 voteDelta);\n    event UserBalance(\n        address indexed to,\n        address indexed from,\n        Token[] tokenRef,\n        int128[] delta\n    );\n    event BribeAttached(IGauge indexed gauge, IBribe indexed bribe);\n    event BribeKilled(IGauge indexed gauge, IBribe indexed bribe);\n    event GaugeKilled(IGauge indexed gauge, bool killed);\n\n    function notifyInitialSupply(Token, uint128, uint128) external;\n\n    function attachBribe(IGauge gauge, IBribe bribe) external;\n\n    function killBribe(IGauge gauge, IBribe bribe) external;\n\n    function killGauge(IGauge gauge, bool t) external;\n\n    function ballotToken() external returns (Token);\n\n    function emissionToken() external returns (Token);\n\n    function execute(\n        Token[] calldata tokenRef,\n        int128[] memory deposit,\n        VelocoreOperation[] calldata ops\n    ) external payable;\n\n    function query(\n        address user,\n        Token[] calldata tokenRef,\n        int128[] memory deposit,\n        VelocoreOperation[] calldata ops\n    ) external returns (int128[] memory);\n\n    function admin_setFunctions(\n        address implementation,\n        bytes4[] calldata sigs\n    ) external;\n\n    function admin_addFacet(IFacet implementation) external;\n\n    function admin_setAuthorizer(IAuthorizer auth_) external;\n\n    function inspect(address lens, bytes memory data) external;\n}\n"
    },
    "contracts/LGEDepositor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOwnedDistributor.sol\";\nimport \"./interfaces/VelocoreInterfaces.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeToken.sol\";\n\ncontract LGEDepositor is AccessControl {\n    using TokenLib for Token;\n    using SafeToken for address;\n\n    address public immutable liquidityGenerator;\n    IVault public immutable vault;\n    IFactory public immutable factory;\n    address public immutable mendi;\n    address public immutable usdc;\n    address public immutable vc;\n\n    Token public immutable mendiToken;\n    Token public immutable usdcToken;\n    Token public immutable vcToken;\n    IPool public immutable mendiUSDCPool;\n    Token public immutable mendiUSDCPoolToken;\n\n    uint256 finalizeAt;\n    bool deposited;\n\n    uint8 constant SWAP = 0;\n    uint8 constant GAUGE = 1;\n\n    uint8 constant EXACTLY = 0;\n    uint8 constant AT_MOST = 1;\n    uint8 constant ALL = 2;\n\n    bytes32 public HARVESTER_ROLE = keccak256(\"HARVESTER_ROLE\");\n\n    modifier onlyLG() {\n        require(msg.sender == liquidityGenerator, \"LGEDepositor: ONLY_LG\");\n        _;\n    }\n\n    constructor(\n        address liquidityGenerator_,\n        IVault vault_,\n        IFactory factory_,\n        address mendi_,\n        address usdc_,\n        address vc_\n    ) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        liquidityGenerator = liquidityGenerator_;\n        vault = vault_;\n        factory = factory_;\n        mendi = mendi_;\n        usdc = usdc_;\n        vc = vc_;\n\n        mendiToken = toToken(IERC20(mendi));\n        usdcToken = toToken(IERC20(usdc));\n        vcToken = toToken(IERC20(vc));\n\n        mendiUSDCPool = factory.pools(mendiToken, usdcToken);\n        mendiUSDCPoolToken = toToken(IERC20(address(mendiUSDCPool)));\n    }\n\n    function finalize() external onlyLG {\n        finalizeAt = getBlockTimestamp();\n    }\n\n    function deposit() external {\n        require(finalizeAt > 0, \"LGEDepositor: NOT_FINALIZED\");\n        require(\n            mendi.balanceOf(address(this)) >= 2_500_000e18,\n            \"LGEDepositor: NOT_ENOUGH_MENDI\"\n        );\n\n        addLPInternal();\n        stakeLPInternal();\n\n        deposited = true;\n    }\n\n    function harvest(address to) external onlyRole(HARVESTER_ROLE) {\n        require(deposited, \"LGEDepositor: NOT_DEPOSITED\");\n\n        harvestVCInternal();\n\n        sendAllInternal(vcToken, to);\n    }\n\n    function withdraw(address to) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            getBlockTimestamp() > finalizeAt + 180 days,\n            \"LGEDepositor: LP_LOCKED\"\n        );\n\n        unstakeLPInternal();\n\n        sendAllInternal(mendiUSDCPoolToken, to);\n    }\n\n    /* Internal Liquidity Functions */\n\n    function addLPInternal() internal {\n        approveAllInternal(mendiToken, address(vault));\n        approveAllInternal(usdcToken, address(vault));\n\n        run3Internal(\n            0,\n            mendiUSDCPool,\n            SWAP,\n            mendiToken,\n            EXACTLY,\n            int128(int256(mendiToken.addr().balanceOf(address(this)))),\n            usdcToken,\n            EXACTLY,\n            int128(int256(usdcToken.addr().balanceOf(address(this)))),\n            mendiUSDCPoolToken,\n            AT_MOST,\n            0\n        );\n\n        removeApproveInternal(mendiToken, address(vault));\n        removeApproveInternal(usdcToken, address(vault));\n    }\n\n    function stakeLPInternal() internal {\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\n\n        run2Internal(\n            0,\n            mendiUSDCPool,\n            GAUGE,\n            mendiUSDCPoolToken,\n            EXACTLY,\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this)))),\n            vcToken,\n            AT_MOST,\n            0\n        );\n\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\n    }\n\n    function harvestVCInternal() internal {\n        run1Internal(0, mendiUSDCPool, GAUGE, vcToken, AT_MOST, 0);\n    }\n\n    function unstakeLPInternal() internal {\n        uint256 stakedAmount = IGauge(address(mendiUSDCPool)).stakedTokens(\n            address(this)\n        )[0];\n\n        run2Internal(\n            0,\n            mendiUSDCPool,\n            GAUGE,\n            mendiUSDCPoolToken,\n            EXACTLY,\n            -(int128(uint128(stakedAmount))),\n            vcToken,\n            AT_MOST,\n            0\n        );\n    }\n\n    function removeLPInternal() internal {\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\n\n        run3Internal(\n            0,\n            mendiUSDCPool,\n            SWAP,\n            mendiToken,\n            AT_MOST,\n            0,\n            usdcToken,\n            AT_MOST,\n            0,\n            mendiUSDCPoolToken,\n            EXACTLY,\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this))))\n        );\n\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\n    }\n\n    function run1Internal(\n        uint256 value,\n        IPool pool,\n        uint8 method,\n        Token t1,\n        uint8 m1,\n        int128 a1\n    ) internal {\n        Token[] memory tokens = new Token[](1);\n\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\n\n        tokens[0] = (t1);\n\n        ops[0].poolId =\n            bytes32(bytes1(method)) |\n            bytes32(uint256(uint160(address(pool))));\n        ops[0].tokenInformations = new bytes32[](1);\n        ops[0].data = \"\";\n\n        ops[0].tokenInformations[0] =\n            bytes32(bytes1(0x00)) |\n            bytes32(bytes2(uint16(m1))) |\n            bytes32(uint256(uint128(uint256(int256(a1)))));\n        vault.execute{value: value}(tokens, new int128[](1), ops);\n    }\n\n    function run2Internal(\n        uint256 value,\n        IPool pool,\n        uint8 method,\n        Token t1,\n        uint8 m1,\n        int128 a1,\n        Token t2,\n        uint8 m2,\n        int128 a2\n    ) internal {\n        Token[] memory tokens = new Token[](2);\n\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\n\n        tokens[0] = (t1);\n        tokens[1] = (t2);\n\n        ops[0].poolId =\n            bytes32(bytes1(method)) |\n            bytes32(uint256(uint160(address(pool))));\n        ops[0].tokenInformations = new bytes32[](2);\n        ops[0].data = \"\";\n\n        ops[0].tokenInformations[0] =\n            bytes32(bytes1(0x00)) |\n            bytes32(bytes2(uint16(m1))) |\n            bytes32(uint256(uint128(uint256(int256(a1)))));\n        ops[0].tokenInformations[1] =\n            bytes32(bytes1(0x01)) |\n            bytes32(bytes2(uint16(m2))) |\n            bytes32(uint256(uint128(uint256(int256(a2)))));\n        vault.execute{value: value}(tokens, new int128[](2), ops);\n    }\n\n    function run3Internal(\n        uint256 value,\n        IPool pool,\n        uint8 method,\n        Token t1,\n        uint8 m1,\n        int128 a1,\n        Token t2,\n        uint8 m2,\n        int128 a2,\n        Token t3,\n        uint8 m3,\n        int128 a3\n    ) internal {\n        Token[] memory tokens = new Token[](3);\n\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\n\n        tokens[0] = (t1);\n        tokens[1] = (t2);\n        tokens[2] = (t3);\n\n        ops[0].poolId =\n            bytes32(bytes1(method)) |\n            bytes32(uint256(uint160(address(pool))));\n        ops[0].tokenInformations = new bytes32[](3);\n        ops[0].data = \"\";\n\n        ops[0].tokenInformations[0] =\n            bytes32(bytes1(0x00)) |\n            bytes32(bytes2(uint16(m1))) |\n            bytes32(uint256(uint128(uint256(int256(a1)))));\n        ops[0].tokenInformations[1] =\n            bytes32(bytes1(0x01)) |\n            bytes32(bytes2(uint16(m2))) |\n            bytes32(uint256(uint128(uint256(int256(a2)))));\n        ops[0].tokenInformations[2] =\n            bytes32(bytes1(0x02)) |\n            bytes32(bytes2(uint16(m3))) |\n            bytes32(uint256(uint128(uint256(int256(a3)))));\n        vault.execute{value: value}(tokens, new int128[](3), ops);\n    }\n\n    /* Internal Helper Functions */\n\n    function sendAllInternal(Token token, address to) internal {\n        token.addr().safeTransfer(to, token.addr().balanceOf(address(this)));\n    }\n\n    function approveAllInternal(Token token, address spender) internal {\n        token.addr().safeApprove(\n            spender,\n            token.addr().balanceOf(address(this))\n        );\n    }\n\n    function removeApproveInternal(Token token, address spender) internal {\n        token.addr().safeApprove(spender, 0);\n    }\n\n    /* Admin Functions */\n\n    function _recover(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(\n            finalizeAt == 0 || getBlockTimestamp() > finalizeAt + 7 days,\n            \"LGEDepositor: NOT_RECOVER_TIME\"\n        );\n        uint256 amount = token.balanceOf(address(this));\n        token.safeTransfer(msg.sender, amount);\n    }\n\n    /* Misc Functions */\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n// a library for performing various math operations\n// forked from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\n\nlibrary Math {\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/libraries/SafeToken.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\ninterface ERC20Interface {\n    function balanceOf(address user) external view returns (uint256);\n}\n\nlibrary SafeToken {\n    function myBalance(address token) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(address(this));\n    }\n\n    function balanceOf(\n        address token,\n        address user\n    ) internal view returns (uint256) {\n        return ERC20Interface(token).balanceOf(user);\n    }\n\n    function safeApprove(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x095ea7b3, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeApprove\"\n        );\n    }\n\n    function safeTransfer(address token, address to, uint256 value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0xa9059cbb, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransfer\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"!safeTransferFrom\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"!safeTransferETH\");\n    }\n}\n"
    },
    "contracts/LiquidityGenerator.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IOwnedDistributor.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeToken.sol\";\nimport \"./LGEDepositor.sol\";\n\ncontract LiquidityGenerator {\n    using SafeMath for uint256;\n    using SafeToken for address;\n\n    struct ConstuctorParams {\n        address admin_;\n        address mendi_;\n        address usdc_;\n        address reservesManager_;\n        address distributor_;\n        address bonusDistributor_;\n        uint256 periodBegin_;\n        uint256 periodDuration_;\n        uint256 bonusDuration_;\n    }\n\n    address public immutable mendi;\n    address public immutable usdc;\n    address public immutable distributor;\n    address public immutable bonusDistributor;\n    uint256 public immutable periodBegin;\n    uint256 public immutable periodEnd;\n    uint256 public immutable bonusEnd;\n    bool public finalized = false;\n    address public admin;\n    address public pendingAdmin;\n    address public reservesManager;\n\n    event AdminChanged(address prevAdmin, address newAdmin);\n    event PendingAdminChanged(\n        address prevPendingAdmin,\n        address newPendingAdmin\n    );\n    event ReservesManagerChanged(\n        address prevReservesManager,\n        address newReservesManager\n    );\n    event Finalized(uint256 amountMendi, uint256 amountUSDC);\n    event Deposit(\n        address indexed sender,\n        uint256 amount,\n        uint256 distributorTotalShares,\n        uint256 bonusDistributorTotalShares,\n        uint256 newShares,\n        uint256 newBonusShares\n    );\n\n    constructor(ConstuctorParams memory params_) {\n        require(\n            params_.periodDuration_ > 0,\n            \"LiquidityGenerator: INVALID_PERIOD_DURATION\"\n        );\n        require(\n            params_.bonusDuration_ > 0 &&\n                params_.bonusDuration_ <= params_.periodDuration_,\n            \"LiquidityGenerator: INVALID_BONUS_DURATION\"\n        );\n        admin = params_.admin_;\n        mendi = params_.mendi_;\n        usdc = params_.usdc_;\n        reservesManager = params_.reservesManager_;\n        distributor = params_.distributor_;\n        bonusDistributor = params_.bonusDistributor_;\n        periodBegin = params_.periodBegin_;\n        periodEnd = params_.periodBegin_.add(params_.periodDuration_);\n        bonusEnd = params_.periodBegin_.add(params_.bonusDuration_);\n    }\n\n    function distributorTotalShares()\n        public\n        view\n        returns (uint256 totalShares)\n    {\n        return IOwnedDistributor(distributor).totalShares();\n    }\n\n    function bonusDistributorTotalShares()\n        public\n        view\n        returns (uint256 totalShares)\n    {\n        return IOwnedDistributor(bonusDistributor).totalShares();\n    }\n\n    function distributorRecipients(\n        address account\n    )\n        public\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\n    {\n        return IOwnedDistributor(distributor).recipients(account);\n    }\n\n    function bonusDistributorRecipients(\n        address account\n    )\n        public\n        view\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\n    {\n        return IOwnedDistributor(bonusDistributor).recipients(account);\n    }\n\n    function _setAdmin(address admin_) external {\n        require(msg.sender == admin, \"LiquidityGenerator: FORBIDDEN\");\n        require(admin_ != address(0), \"LiquidityGenerator: INVALID_ADDRESS\");\n        address prevPendingAdmin = pendingAdmin;\n        pendingAdmin = admin_;\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\n    }\n\n    function _acceptAdmin() external {\n        require(msg.sender == pendingAdmin, \"LiquidityGenerator: FORBIDDEN\");\n        address prevAdmin = admin;\n        address prevPendingAdmin = pendingAdmin;\n        admin = pendingAdmin;\n        pendingAdmin = address(0);\n        emit AdminChanged(prevAdmin, admin);\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\n    }\n\n    function _setReservesManager(address reservesManager_) external {\n        require(\n            getBlockTimestamp() < periodBegin,\n            \"LiquidityGenerator: Event Started\"\n        );\n        require(msg.sender == admin, \"LiquidityGenerator: FORBIDDEN\");\n        require(\n            reservesManager_ != address(0),\n            \"LiquidityGenerator: INVALID_ADDRESS\"\n        );\n        address prevReservesManager = reservesManager;\n        reservesManager = reservesManager_;\n        emit ReservesManagerChanged(prevReservesManager, reservesManager);\n    }\n\n    function finalize() public {\n        require(!finalized, \"LiquidityGenerator: FINALIZED\");\n        uint256 blockTimestamp = getBlockTimestamp();\n        require(blockTimestamp >= periodEnd, \"LiquidityGenerator: TOO_SOON\");\n\n        uint256 _amountMendi = mendi.balanceOf(reservesManager);\n        uint256 _amountUSDC = usdc.balanceOf(reservesManager);\n\n        LGEDepositor(reservesManager).finalize();\n\n        finalized = true;\n        emit Finalized(_amountMendi, _amountUSDC);\n    }\n\n    function deposit(uint256 amountUSDC) external payable {\n        uint256 blockTimestamp = getBlockTimestamp();\n        require(blockTimestamp >= periodBegin, \"LiquidityGenerator: TOO_SOON\");\n        require(blockTimestamp < periodEnd, \"LiquidityGenerator: TOO_LATE\");\n        require(amountUSDC >= 1e7, \"LiquidityGenerator: INVALID_VALUE\"); // minimum 10 USDC\n\n        // Pull usdc to reserves manager\n        require(\n            reservesManager != address(0),\n            \"LiquidityGenerator: ZERO_ADDRESS_RESERVES\"\n        );\n        usdc.safeTransferFrom(msg.sender, reservesManager, amountUSDC);\n\n        (uint256 _prevSharesBonus, , ) = IOwnedDistributor(bonusDistributor)\n            .recipients(msg.sender);\n        uint256 _newSharesBonus = _prevSharesBonus;\n        if (blockTimestamp < bonusEnd) {\n            _newSharesBonus = _prevSharesBonus.add(amountUSDC);\n            IOwnedDistributor(bonusDistributor).editRecipient(\n                msg.sender,\n                _newSharesBonus\n            );\n        }\n        (uint256 _prevShares, , ) = IOwnedDistributor(distributor).recipients(\n            msg.sender\n        );\n        uint256 _newShares = _prevShares.add(amountUSDC);\n        IOwnedDistributor(distributor).editRecipient(msg.sender, _newShares);\n        emit Deposit(\n            msg.sender,\n            amountUSDC,\n            distributorTotalShares(),\n            bonusDistributorTotalShares(),\n            _newShares,\n            _newSharesBonus\n        );\n    }\n\n    receive() external payable {\n        revert(\"LiquidityGenerator: BAD_CALL\");\n    }\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/Mendi.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Mendi is ERC20 {\n    constructor(address account) ERC20(\"Mendi Finance\", \"MENDI\") {\n        _mint(account, 100_000_000e18);\n    }\n}\n"
    },
    "contracts/OwnedDistributor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./Distributor.sol\";\n\ncontract OwnedDistributor is Distributor {\n    address public admin;\n\n    event SetAdmin(address newAdmin);\n\n    constructor(\n        address mendi_,\n        address claimable_,\n        address admin_\n    ) Distributor(mendi_, claimable_) {\n        admin = admin_;\n    }\n\n    function editRecipient(address account, uint256 shares) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        editRecipientInternal(account, shares);\n    }\n\n    function editRecipients(\n        address[] memory accounts,\n        uint256[] memory shares\n    ) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        require(\n            accounts.length == shares.length,\n            \"OwnedDistributor: INVALID_INPUT\"\n        );\n\n        for (uint256 i = 0; i < accounts.length; i++) {\n            editRecipientInternal(accounts[i], shares[i]);\n        }\n    }\n\n    function setAdmin(address admin_) public virtual {\n        require(msg.sender == admin, \"OwnedDistributor: UNAUTHORIZED\");\n        admin = admin_;\n        emit SetAdmin(admin_);\n    }\n}\n"
    },
    "contracts/test/MockClaimable.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IClaimable.sol\";\n\ncontract MockClaimable is IClaimable {\n    address public token;\n    address public recipient;\n\n    uint256 public claimPerSecond;\n    uint256 public lastClaim;\n\n    constructor(address token_, uint256 claimPerSecond_, uint256 lastClaim_) {\n        token = token_;\n        claimPerSecond = claimPerSecond_;\n        lastClaim = lastClaim_;\n    }\n\n    function claim() external override returns (uint256) {\n        if (lastClaim > block.timestamp) {\n            return 0;\n        }\n\n        require(\n            recipient == address(0) || recipient == msg.sender,\n            \"MockClaimable: not recipient\"\n        );\n\n        uint256 amount = claimPerSecond * (block.timestamp - lastClaim);\n        lastClaim = block.timestamp;\n        IERC20(token).transfer(recipient, amount);\n        return amount;\n    }\n\n    function setRecipient(address recipient_) external {\n        recipient = recipient_;\n    }\n}\n"
    },
    "contracts/test/MockERC20Token.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20Token is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(uint256 supply, uint8 decimals_) ERC20(\"MockERC20\", \"MCK\") {\n        _decimals = decimals_;\n\n        _mint(msg.sender, supply);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/utils/Multicall.sol": {
      "content": "pragma solidity >=0.5.0;\npragma experimental ABIEncoderV2;\n\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\n/// @author Michael Elliot <mike@makerdao.com>\n/// @author Joshua Levine <joshua@makerdao.com>\n/// @author Nick Johnson <arachnid@notdot.net>\n\ncontract Multicall2 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(\n        Call[] memory calls\n    ) public returns (uint256 blockNumber, bytes[] memory returnData) {\n        blockNumber = block.number;\n        returnData = new bytes[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n            require(success, \"Multicall aggregate: call failed\");\n            returnData[i] = ret;\n        }\n    }\n\n    function blockAndAggregate(\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(\n            true,\n            calls\n        );\n    }\n\n    function getBlockHash(\n        uint256 blockNumber\n    ) public view returns (bytes32 blockHash) {\n        blockHash = blockhash(blockNumber);\n    }\n\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        blockNumber = block.number;\n    }\n\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\n        coinbase = block.coinbase;\n    }\n\n    function getCurrentBlockDifficulty()\n        public\n        view\n        returns (uint256 difficulty)\n    {\n        difficulty = block.difficulty;\n    }\n\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\n        gaslimit = block.gaslimit;\n    }\n\n    function getCurrentBlockTimestamp()\n        public\n        view\n        returns (uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n    }\n\n    function getEthBalance(address addr) public view returns (uint256 balance) {\n        balance = addr.balance;\n    }\n\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\n        blockHash = blockhash(block.number - 1);\n    }\n\n    function tryAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    ) public returns (Result[] memory returnData) {\n        returnData = new Result[](calls.length);\n        for (uint256 i = 0; i < calls.length; i++) {\n            (bool success, bytes memory ret) = calls[i].target.call(\n                calls[i].callData\n            );\n\n            if (requireSuccess) {\n                require(success, \"Multicall2 aggregate: call failed\");\n            }\n\n            returnData[i] = Result(success, ret);\n        }\n    }\n\n    function tryBlockAndAggregate(\n        bool requireSuccess,\n        Call[] memory calls\n    )\n        public\n        returns (\n            uint256 blockNumber,\n            bytes32 blockHash,\n            Result[] memory returnData\n        )\n    {\n        blockNumber = block.number;\n        blockHash = blockhash(block.number);\n        returnData = tryAggregate(requireSuccess, calls);\n    }\n}\n"
    },
    "contracts/Vester.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./interfaces/IMendi.sol\";\nimport \"./interfaces/IClaimable.sol\";\nimport \"./interfaces/IVester.sol\";\n\ncontract Vester is IVester, IClaimable {\n    using SafeMath for uint256;\n\n    uint256 public constant override segments = 100;\n\n    address public immutable mendi;\n    address public recipient;\n\n    uint256 public immutable override vestingAmount;\n    uint256 public immutable override vestingBegin;\n    uint256 public immutable override vestingEnd;\n\n    uint256 public previousPoint;\n    uint256 public immutable finalPoint;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) {\n        require(vestingEnd_ > vestingBegin_, \"Vester: END_TOO_EARLY\");\n\n        mendi = mendi_;\n        recipient = recipient_;\n\n        vestingAmount = vestingAmount_;\n        vestingBegin = vestingBegin_;\n        vestingEnd = vestingEnd_;\n\n        finalPoint = vestingCurve(1e18);\n    }\n\n    function vestingCurve(uint256 x) public pure virtual returns (uint256 y) {\n        uint256 speed = 1e18;\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\n            if (x < i + 1e16) return y + (speed * (x - i)) / 1e16;\n            y += speed;\n            speed = (speed * 976) / 1000;\n        }\n    }\n\n    function getUnlockedAmount() internal virtual returns (uint256 amount) {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve(\n            (blockTimestamp - vestingBegin).mul(1e18).div(\n                vestingEnd - vestingBegin\n            )\n        );\n        amount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(\n            finalPoint\n        );\n        previousPoint = currentPoint;\n    }\n\n    function claim() public virtual override returns (uint256 amount) {\n        require(msg.sender == recipient, \"Vester: UNAUTHORIZED\");\n        uint256 blockTimestamp = getBlockTimestamp();\n        if (blockTimestamp < vestingBegin) return 0;\n        if (blockTimestamp > vestingEnd) {\n            amount = IMendi(mendi).balanceOf(address(this));\n        } else {\n            amount = getUnlockedAmount();\n        }\n        if (amount > 0) IMendi(mendi).transfer(recipient, amount);\n    }\n\n    function setRecipient(address recipient_) public virtual {\n        require(msg.sender == recipient, \"Vester: UNAUTHORIZED\");\n        recipient = recipient_;\n    }\n\n    function getBlockTimestamp() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/VesterCliff.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./Vester.sol\";\n\ncontract VesterCliff is Vester {\n    using SafeMath for uint256;\n\n    uint256 public immutable vestingCliff;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_,\n        uint256 vestingCliff_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {\n        require(\n            vestingCliff_ >= vestingBegin_,\n            \"VesterCliff::constructor: cliff is too early\"\n        );\n        require(\n            vestingCliff_ <= vestingEnd_,\n            \"VesterCliff::constructor: cliff is too late\"\n        );\n        vestingCliff = vestingCliff_;\n    }\n\n    function claim() public virtual override returns (uint256 amount) {\n        uint256 blockTimestamp = getBlockTimestamp();\n        if (blockTimestamp < vestingCliff) return 0;\n\n        amount = super.claim();\n    }\n}\n"
    },
    "contracts/VesterSale.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./Vester.sol\";\n\ncontract VesterSale is Vester {\n    using SafeMath for uint256;\n\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n\n    function getUnlockedAmount()\n        internal\n        virtual\n        override\n        returns (uint256 amount)\n    {\n        uint256 blockTimestamp = getBlockTimestamp();\n        uint256 currentPoint = vestingCurve(\n            (blockTimestamp - vestingBegin).mul(1e18).div(\n                vestingEnd - vestingBegin\n            )\n        );\n        amount = vestingAmount\n            .mul(currentPoint.sub(previousPoint))\n            .div(finalPoint)\n            .mul(5)\n            .div(10);\n        if (previousPoint == 0 && currentPoint > 0) {\n            // distribute 50% on TGE\n            amount = amount.add(vestingAmount.div(2));\n        }\n        previousPoint = currentPoint;\n    }\n}\n"
    },
    "contracts/VesterStepped.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.10;\n\nimport \"./Vester.sol\";\n\ncontract VesterStepped is Vester {\n    constructor(\n        address mendi_,\n        address recipient_,\n        uint256 vestingAmount_,\n        uint256 vestingBegin_,\n        uint256 vestingEnd_\n    ) Vester(mendi_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n\n    function vestingCurve(\n        uint256 x\n    ) public pure virtual override returns (uint256 y) {\n        uint256 speed = 1e18;\n        for (uint256 i = 0; i < 100e16; i += 1e16) {\n            if (x < i) return y;\n            y += speed;\n            speed = (speed * 976) / 1000;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}