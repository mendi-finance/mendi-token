{
  "address": "0x55231F67b289815483a037D459877D85819e9144",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "admin_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "mendi_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdc_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reservesManager_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "distributor_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bonusDistributor_",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "periodBegin_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "periodDuration_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bonusDuration_",
              "type": "uint256"
            }
          ],
          "internalType": "struct LiquidityGenerator.ConstuctorParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributorTotalShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonusDistributorTotalShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBonusShares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountMendi",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "PendingAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevReservesManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReservesManager",
          "type": "address"
        }
      ],
      "name": "ReservesManagerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "_setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reservesManager_",
          "type": "address"
        }
      ],
      "name": "_setReservesManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "bonusDistributorRecipients",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastShareIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "credit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusDistributorTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountUSDC",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "distributorRecipients",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastShareIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "credit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributorTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mendi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4244511ba0c1f9b49fcddb0bf6874e6f3a16e38923f7bc6e3d82d9217e112a32",
  "receipt": {
    "to": null,
    "from": "0x57cd331C7b2c7582625810465Ea3CF9bdcA21236",
    "contractAddress": "0x55231F67b289815483a037D459877D85819e9144",
    "transactionIndex": 0,
    "gasUsed": "1183632",
    "logsBloom": "0x
    "blockHash": "0x4590751c30de390cea3e5096385a0117908c4a7a2e601c630fc74a224c90b00f",
    "transactionHash": "0x4244511ba0c1f9b49fcddb0bf6874e6f3a16e38923f7bc6e3d82d9217e112a32",
    "logs": [],
    "blockNumber": 166554,
    "cumulativeGasUsed": "1183632",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x57cd331C7b2c7582625810465Ea3CF9bdcA21236",
      "0x43E8809ea748EFf3204ee01F08872F063e44065f",
      "0x176211869ca2b568f2a7d4ee941e073a821ee1ff",
      "0xe3CDa0A0896b70F0eBC6A1848096529AA7AEe9eE",
      "0x5df2107A5b5e7B0b19DD7dED7470e8d9792BC434",
      "0x716F2de8A4dE036FFe2b806A2948060A6f1053f5",
      1691672400,
      604800,
      86400
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "d64cd7ba315dfc138d7ff0705d878448",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mendi_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reservesManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bonusDistributor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodBegin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusDuration_\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityGenerator.ConstuctorParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributorTotalShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusDistributorTotalShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBonusShares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMendi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"PendingAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevReservesManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReservesManager\",\"type\":\"address\"}],\"name\":\"ReservesManagerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"_setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reservesManager_\",\"type\":\"address\"}],\"name\":\"_setReservesManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bonusDistributorRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastShareIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusDistributorTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDC\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"distributorRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastShareIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mendi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityGenerator.sol\":\"LiquidityGenerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LGEDepositor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOwnedDistributor.sol\\\";\\nimport \\\"./interfaces/VelocoreInterfaces.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeToken.sol\\\";\\n\\ncontract LGEDepositor is AccessControl {\\n    using TokenLib for Token;\\n    using SafeToken for address;\\n\\n    address public immutable liquidityGenerator;\\n    IVault public immutable vault;\\n    IFactory public immutable factory;\\n    address public immutable mendi;\\n    address public immutable usdc;\\n    address public immutable vc;\\n\\n    Token public immutable mendiToken;\\n    Token public immutable usdcToken;\\n    Token public immutable vcToken;\\n    IPool public immutable mendiUSDCPool;\\n    Token public immutable mendiUSDCPoolToken;\\n\\n    uint256 finalizeAt;\\n    bool deposited;\\n\\n    uint8 constant SWAP = 0;\\n    uint8 constant GAUGE = 1;\\n\\n    uint8 constant EXACTLY = 0;\\n    uint8 constant AT_MOST = 1;\\n    uint8 constant ALL = 2;\\n\\n    bytes32 public HARVESTER_ROLE = keccak256(\\\"HARVESTER_ROLE\\\");\\n\\n    modifier onlyLG() {\\n        require(msg.sender == liquidityGenerator, \\\"LGEDepositor: ONLY_LG\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address liquidityGenerator_,\\n        IVault vault_,\\n        IFactory factory_,\\n        address mendi_,\\n        address usdc_,\\n        address vc_\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n        liquidityGenerator = liquidityGenerator_;\\n        vault = vault_;\\n        factory = factory_;\\n        mendi = mendi_;\\n        usdc = usdc_;\\n        vc = vc_;\\n\\n        mendiToken = toToken(IERC20(mendi));\\n        usdcToken = toToken(IERC20(usdc));\\n        vcToken = toToken(IERC20(vc));\\n\\n        mendiUSDCPool = factory.pools(mendiToken, usdcToken);\\n        mendiUSDCPoolToken = toToken(IERC20(address(mendiUSDCPool)));\\n    }\\n\\n    function finalize() external onlyLG {\\n        finalizeAt = getBlockTimestamp();\\n    }\\n\\n    function deposit() external {\\n        require(finalizeAt > 0, \\\"LGEDepositor: NOT_FINALIZED\\\");\\n        require(\\n            mendi.balanceOf(address(this)) >= 2_500_000e18,\\n            \\\"LGEDepositor: NOT_ENOUGH_MENDI\\\"\\n        );\\n\\n        addLPInternal();\\n        stakeLPInternal();\\n\\n        deposited = true;\\n    }\\n\\n    function harvest(address to) external onlyRole(HARVESTER_ROLE) {\\n        require(deposited, \\\"LGEDepositor: NOT_DEPOSITED\\\");\\n\\n        harvestVCInternal();\\n\\n        sendAllInternal(vcToken, to);\\n    }\\n\\n    function withdraw(address to) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            getBlockTimestamp() > finalizeAt + 180 days,\\n            \\\"LGEDepositor: LP_LOCKED\\\"\\n        );\\n\\n        unstakeLPInternal();\\n\\n        sendAllInternal(mendiUSDCPoolToken, to);\\n    }\\n\\n    /* Internal Liquidity Functions */\\n\\n    function addLPInternal() internal {\\n        approveAllInternal(mendiToken, address(vault));\\n        approveAllInternal(usdcToken, address(vault));\\n\\n        run3Internal(\\n            0,\\n            mendiUSDCPool,\\n            SWAP,\\n            mendiToken,\\n            EXACTLY,\\n            int128(int256(mendiToken.addr().balanceOf(address(this)))),\\n            usdcToken,\\n            EXACTLY,\\n            int128(int256(usdcToken.addr().balanceOf(address(this)))),\\n            mendiUSDCPoolToken,\\n            AT_MOST,\\n            0\\n        );\\n\\n        removeApproveInternal(mendiToken, address(vault));\\n        removeApproveInternal(usdcToken, address(vault));\\n    }\\n\\n    function stakeLPInternal() internal {\\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\\n\\n        run2Internal(\\n            0,\\n            mendiUSDCPool,\\n            GAUGE,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this)))),\\n            vcToken,\\n            AT_MOST,\\n            0\\n        );\\n\\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\\n    }\\n\\n    function harvestVCInternal() internal {\\n        run1Internal(0, mendiUSDCPool, GAUGE, vcToken, AT_MOST, 0);\\n    }\\n\\n    function unstakeLPInternal() internal {\\n        uint256 stakedAmount = IGauge(address(mendiUSDCPool)).stakedTokens(\\n            address(this)\\n        )[0];\\n\\n        run2Internal(\\n            0,\\n            mendiUSDCPool,\\n            GAUGE,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            -(int128(uint128(stakedAmount))),\\n            vcToken,\\n            AT_MOST,\\n            0\\n        );\\n    }\\n\\n    function removeLPInternal() internal {\\n        approveAllInternal(mendiUSDCPoolToken, address(vault));\\n\\n        run3Internal(\\n            0,\\n            mendiUSDCPool,\\n            SWAP,\\n            mendiToken,\\n            AT_MOST,\\n            0,\\n            usdcToken,\\n            AT_MOST,\\n            0,\\n            mendiUSDCPoolToken,\\n            EXACTLY,\\n            int128(int256(mendiUSDCPoolToken.addr().balanceOf(address(this))))\\n        );\\n\\n        removeApproveInternal(mendiUSDCPoolToken, address(vault));\\n    }\\n\\n    function run1Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1\\n    ) internal {\\n        Token[] memory tokens = new Token[](1);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](1);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        vault.execute{value: value}(tokens, new int128[](1), ops);\\n    }\\n\\n    function run2Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1,\\n        Token t2,\\n        uint8 m2,\\n        int128 a2\\n    ) internal {\\n        Token[] memory tokens = new Token[](2);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n        tokens[1] = (t2);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](2);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        ops[0].tokenInformations[1] =\\n            bytes32(bytes1(0x01)) |\\n            bytes32(bytes2(uint16(m2))) |\\n            bytes32(uint256(uint128(uint256(int256(a2)))));\\n        vault.execute{value: value}(tokens, new int128[](2), ops);\\n    }\\n\\n    function run3Internal(\\n        uint256 value,\\n        IPool pool,\\n        uint8 method,\\n        Token t1,\\n        uint8 m1,\\n        int128 a1,\\n        Token t2,\\n        uint8 m2,\\n        int128 a2,\\n        Token t3,\\n        uint8 m3,\\n        int128 a3\\n    ) internal {\\n        Token[] memory tokens = new Token[](3);\\n\\n        VelocoreOperation[] memory ops = new VelocoreOperation[](1);\\n\\n        tokens[0] = (t1);\\n        tokens[1] = (t2);\\n        tokens[2] = (t3);\\n\\n        ops[0].poolId =\\n            bytes32(bytes1(method)) |\\n            bytes32(uint256(uint160(address(pool))));\\n        ops[0].tokenInformations = new bytes32[](3);\\n        ops[0].data = \\\"\\\";\\n\\n        ops[0].tokenInformations[0] =\\n            bytes32(bytes1(0x00)) |\\n            bytes32(bytes2(uint16(m1))) |\\n            bytes32(uint256(uint128(uint256(int256(a1)))));\\n        ops[0].tokenInformations[1] =\\n            bytes32(bytes1(0x01)) |\\n            bytes32(bytes2(uint16(m2))) |\\n            bytes32(uint256(uint128(uint256(int256(a2)))));\\n        ops[0].tokenInformations[2] =\\n            bytes32(bytes1(0x02)) |\\n            bytes32(bytes2(uint16(m3))) |\\n            bytes32(uint256(uint128(uint256(int256(a3)))));\\n        vault.execute{value: value}(tokens, new int128[](3), ops);\\n    }\\n\\n    /* Internal Helper Functions */\\n\\n    function sendAllInternal(Token token, address to) internal {\\n        token.addr().safeTransfer(to, token.addr().balanceOf(address(this)));\\n    }\\n\\n    function approveAllInternal(Token token, address spender) internal {\\n        token.addr().safeApprove(\\n            spender,\\n            token.addr().balanceOf(address(this))\\n        );\\n    }\\n\\n    function removeApproveInternal(Token token, address spender) internal {\\n        token.addr().safeApprove(spender, 0);\\n    }\\n\\n    /* Admin Functions */\\n\\n    function _recover(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            finalizeAt == 0 || getBlockTimestamp() > finalizeAt + 7 days,\\n            \\\"LGEDepositor: NOT_RECOVER_TIME\\\"\\n        );\\n        uint256 amount = token.balanceOf(address(this));\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    /* Misc Functions */\\n\\n    function getBlockTimestamp() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x08ed97bac75625614fceb7ed1f3a90a83c18c84c7012872ef0a558d4983e668a\",\"license\":\"UNLICENSED\"},\"contracts/LiquidityGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IOwnedDistributor.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeToken.sol\\\";\\nimport \\\"./LGEDepositor.sol\\\";\\n\\ncontract LiquidityGenerator {\\n    using SafeMath for uint256;\\n    using SafeToken for address;\\n\\n    struct ConstuctorParams {\\n        address admin_;\\n        address mendi_;\\n        address usdc_;\\n        address reservesManager_;\\n        address distributor_;\\n        address bonusDistributor_;\\n        uint256 periodBegin_;\\n        uint256 periodDuration_;\\n        uint256 bonusDuration_;\\n    }\\n\\n    address public immutable mendi;\\n    address public immutable usdc;\\n    address public immutable distributor;\\n    address public immutable bonusDistributor;\\n    uint256 public immutable periodBegin;\\n    uint256 public immutable periodEnd;\\n    uint256 public immutable bonusEnd;\\n    bool public finalized = false;\\n    address public admin;\\n    address public pendingAdmin;\\n    address public reservesManager;\\n\\n    event AdminChanged(address prevAdmin, address newAdmin);\\n    event PendingAdminChanged(\\n        address prevPendingAdmin,\\n        address newPendingAdmin\\n    );\\n    event ReservesManagerChanged(\\n        address prevReservesManager,\\n        address newReservesManager\\n    );\\n    event Finalized(uint256 amountMendi, uint256 amountUSDC);\\n    event Deposit(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 distributorTotalShares,\\n        uint256 bonusDistributorTotalShares,\\n        uint256 newShares,\\n        uint256 newBonusShares\\n    );\\n\\n    constructor(ConstuctorParams memory params_) {\\n        require(\\n            params_.periodDuration_ > 0,\\n            \\\"LiquidityGenerator: INVALID_PERIOD_DURATION\\\"\\n        );\\n        require(\\n            params_.bonusDuration_ > 0 &&\\n                params_.bonusDuration_ <= params_.periodDuration_,\\n            \\\"LiquidityGenerator: INVALID_BONUS_DURATION\\\"\\n        );\\n        admin = params_.admin_;\\n        mendi = params_.mendi_;\\n        usdc = params_.usdc_;\\n        reservesManager = params_.reservesManager_;\\n        distributor = params_.distributor_;\\n        bonusDistributor = params_.bonusDistributor_;\\n        periodBegin = params_.periodBegin_;\\n        periodEnd = params_.periodBegin_.add(params_.periodDuration_);\\n        bonusEnd = params_.periodBegin_.add(params_.bonusDuration_);\\n    }\\n\\n    function distributorTotalShares()\\n        public\\n        view\\n        returns (uint256 totalShares)\\n    {\\n        return IOwnedDistributor(distributor).totalShares();\\n    }\\n\\n    function bonusDistributorTotalShares()\\n        public\\n        view\\n        returns (uint256 totalShares)\\n    {\\n        return IOwnedDistributor(bonusDistributor).totalShares();\\n    }\\n\\n    function distributorRecipients(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\\n    {\\n        return IOwnedDistributor(distributor).recipients(account);\\n    }\\n\\n    function bonusDistributorRecipients(\\n        address account\\n    )\\n        public\\n        view\\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit)\\n    {\\n        return IOwnedDistributor(bonusDistributor).recipients(account);\\n    }\\n\\n    function _setAdmin(address admin_) external {\\n        require(msg.sender == admin, \\\"LiquidityGenerator: FORBIDDEN\\\");\\n        require(admin_ != address(0), \\\"LiquidityGenerator: INVALID_ADDRESS\\\");\\n        address prevPendingAdmin = pendingAdmin;\\n        pendingAdmin = admin_;\\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\\n    }\\n\\n    function _acceptAdmin() external {\\n        require(msg.sender == pendingAdmin, \\\"LiquidityGenerator: FORBIDDEN\\\");\\n        address prevAdmin = admin;\\n        address prevPendingAdmin = pendingAdmin;\\n        admin = pendingAdmin;\\n        pendingAdmin = address(0);\\n        emit AdminChanged(prevAdmin, admin);\\n        emit PendingAdminChanged(prevPendingAdmin, pendingAdmin);\\n    }\\n\\n    function _setReservesManager(address reservesManager_) external {\\n        require(\\n            getBlockTimestamp() < periodBegin,\\n            \\\"LiquidityGenerator: Event Started\\\"\\n        );\\n        require(msg.sender == admin, \\\"LiquidityGenerator: FORBIDDEN\\\");\\n        require(\\n            reservesManager_ != address(0),\\n            \\\"LiquidityGenerator: INVALID_ADDRESS\\\"\\n        );\\n        address prevReservesManager = reservesManager;\\n        reservesManager = reservesManager_;\\n        emit ReservesManagerChanged(prevReservesManager, reservesManager);\\n    }\\n\\n    function finalize() public {\\n        require(!finalized, \\\"LiquidityGenerator: FINALIZED\\\");\\n        uint256 blockTimestamp = getBlockTimestamp();\\n        require(blockTimestamp >= periodEnd, \\\"LiquidityGenerator: TOO_SOON\\\");\\n\\n        uint256 _amountMendi = mendi.balanceOf(reservesManager);\\n        uint256 _amountUSDC = usdc.balanceOf(reservesManager);\\n\\n        LGEDepositor(reservesManager).finalize();\\n\\n        finalized = true;\\n        emit Finalized(_amountMendi, _amountUSDC);\\n    }\\n\\n    function deposit(uint256 amountUSDC) external payable {\\n        uint256 blockTimestamp = getBlockTimestamp();\\n        require(blockTimestamp >= periodBegin, \\\"LiquidityGenerator: TOO_SOON\\\");\\n        require(blockTimestamp < periodEnd, \\\"LiquidityGenerator: TOO_LATE\\\");\\n        require(amountUSDC >= 1e7, \\\"LiquidityGenerator: INVALID_VALUE\\\"); // minimum 10 USDC\\n\\n        // Pull usdc to reserves manager\\n        require(\\n            reservesManager != address(0),\\n            \\\"LiquidityGenerator: ZERO_ADDRESS_RESERVES\\\"\\n        );\\n        usdc.safeTransferFrom(msg.sender, reservesManager, amountUSDC);\\n\\n        (uint256 _prevSharesBonus, , ) = IOwnedDistributor(bonusDistributor)\\n            .recipients(msg.sender);\\n        uint256 _newSharesBonus = _prevSharesBonus;\\n        if (blockTimestamp < bonusEnd) {\\n            _newSharesBonus = _prevSharesBonus.add(amountUSDC);\\n            IOwnedDistributor(bonusDistributor).editRecipient(\\n                msg.sender,\\n                _newSharesBonus\\n            );\\n        }\\n        (uint256 _prevShares, , ) = IOwnedDistributor(distributor).recipients(\\n            msg.sender\\n        );\\n        uint256 _newShares = _prevShares.add(amountUSDC);\\n        IOwnedDistributor(distributor).editRecipient(msg.sender, _newShares);\\n        emit Deposit(\\n            msg.sender,\\n            amountUSDC,\\n            distributorTotalShares(),\\n            bonusDistributorTotalShares(),\\n            _newShares,\\n            _newSharesBonus\\n        );\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"LiquidityGenerator: BAD_CALL\\\");\\n    }\\n\\n    function getBlockTimestamp() public view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x192a8e823d0046f8bd59fee5dd4e0cc94cbe2cf1027705b087a8ad652ca3b94d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x05518f83669350f0080acdb26dbbc21963b595caf2ad42bb22283f0733ffc4a6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOwnedDistributor.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IOwnedDistributor {\\n    function totalShares() external view returns (uint256);\\n\\n    function recipients(\\n        address\\n    )\\n        external\\n        view\\n        returns (uint256 shares, uint256 lastShareIndex, uint256 credit);\\n\\n    function editRecipient(address account, uint256 shares) external;\\n}\\n\",\"keccak256\":\"0x5ffd3fe040928b44897f30cacc097cc257cfafd5e05882fb85b9cc0cc77ae720\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/VelocoreInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\nbytes32 constant TOKEN_MASK = 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\nbytes32 constant ID_MASK = 0x00FFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n\\nuint256 constant ID_SHIFT = 160;\\nbytes32 constant TOKENSPEC_MASK = 0xFF00000000000000000000000000000000000000000000000000000000000000;\\n\\ntype Token is bytes32;\\ntype TokenSpecType is bytes32;\\n\\nlibrary TokenSpec {\\n    TokenSpecType constant ERC20 =\\n        TokenSpecType.wrap(\\n            0x0000000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant ERC721 =\\n        TokenSpecType.wrap(\\n            0x0100000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant ERC1155 =\\n        TokenSpecType.wrap(\\n            0x0200000000000000000000000000000000000000000000000000000000000000\\n        );\\n\\n    TokenSpecType constant NATIVE =\\n        TokenSpecType.wrap(\\n            0xEE00000000000000000000000000000000000000000000000000000000000000\\n        );\\n}\\n\\nlibrary TokenLib {\\n    using TokenLib for Token;\\n    using TokenLib for bytes32;\\n\\n    function wrap(bytes32 data) internal pure returns (Token) {\\n        return Token.wrap(data);\\n    }\\n\\n    function unwrap(Token tok) internal pure returns (bytes32) {\\n        return Token.unwrap(tok);\\n    }\\n\\n    function addr(Token tok) internal pure returns (address) {\\n        return address(uint160(uint256(tok.unwrap() & TOKEN_MASK)));\\n    }\\n\\n    function id(Token tok) internal pure returns (uint256) {\\n        return uint256((tok.unwrap() & ID_MASK) >> ID_SHIFT);\\n    }\\n\\n    function spec(Token tok) internal pure returns (TokenSpecType) {\\n        return TokenSpecType.wrap(tok.unwrap() & TOKENSPEC_MASK);\\n    }\\n}\\n\\nfunction toToken(IERC20 tok) pure returns (Token) {\\n    return Token.wrap(bytes32(uint256(uint160(address(tok)))));\\n}\\n\\nfunction toToken(\\n    TokenSpecType spec_,\\n    uint88 id_,\\n    address addr_\\n) pure returns (Token) {\\n    return\\n        Token.wrap(\\n            TokenSpecType.unwrap(spec_) |\\n                bytes32((bytes32(uint256(id_)) << ID_SHIFT) & ID_MASK) |\\n                bytes32(uint256(uint160(addr_)))\\n        );\\n}\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\\ninterface IPool {\\n    function poolParams() external view returns (bytes memory);\\n}\\n\\ninterface ISwap is IPool {\\n    function velocore__execute(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external returns (int128[] memory, int128[] memory);\\n\\n    function swapType() external view returns (string memory);\\n\\n    function listedTokens() external view returns (Token[] memory);\\n\\n    function lpTokens() external view returns (Token[] memory);\\n\\n    function underlyingTokens(Token lp) external view returns (Token[] memory);\\n    //function spotPrice(Token token, Token base) external view returns (uint256);\\n}\\n\\ninterface IGauge is IPool {\\n    /**\\n     * @dev This method is called by Vault.execute().\\n     * the parameters and return values are the same as velocore__execute.\\n     * The only difference is that the vault will call velocore__emission before calling velocore__gauge.\\n     */\\n    function velocore__gauge(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external returns (int128[] memory deltaGauge, int128[] memory deltaPool);\\n\\n    /**\\n     * @dev This method is called by Vault.execute() before calling velocore__emission or changing votes.\\n     *\\n     * The vault will credit emitted VC into the gauge balance.\\n     * IGauge is expected to update its internal ledger.\\n     * @param newEmissions newly emitted VCs since last emission\\n     */\\n    function velocore__emission(uint256 newEmissions) external;\\n\\n    function stakeableTokens() external view returns (Token[] memory);\\n\\n    function stakedTokens(\\n        address user\\n    ) external view returns (uint256[] memory);\\n\\n    function stakedTokens() external view returns (uint256[] memory);\\n\\n    function emissionShare(address user) external view returns (uint256);\\n\\n    function naturalBribes() external view returns (Token[] memory);\\n}\\n\\ninterface IConverter {\\n    /**\\n     * @dev This method is called by Vault.execute().\\n     * Vault will transfer any positively specified amounts directly to the IConverter before calling velocore__convert.\\n     *\\n     * Instead of returning balance delta numbers, IConverter is expected to directly transfer outputs back to vault.\\n     * Vault will measure the difference, and credit the user.\\n     */\\n    function velocore__convert(\\n        address user,\\n        Token[] calldata tokens,\\n        int128[] memory amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IBribe is IPool {\\n    /**\\n     * @dev This method is called when someone vote/harvest from/to a @param gauge,\\n     * and when this IBribe happens to be attached to the gauge.\\n     *\\n     * Attachment can happen without IBribe's permission. Implementations must verify that @param gauge is correct.\\n     *\\n     * Returns balance deltas; their net differences are credited as bribe.\\n     * deltaExternal must be zero or negative; Vault will take specified amounts from the contract's balance\\n     *\\n     * @param  gauge  the gauge to bribe for.\\n     * @param  elapsed  elapsed time after last call; can be used to save gas.\\n     */\\n    function velocore__bribe(\\n        IGauge gauge,\\n        uint256 elapsed\\n    )\\n        external\\n        returns (\\n            Token[] memory bribeTokens,\\n            int128[] memory deltaGauge,\\n            int128[] memory deltaPool,\\n            int128[] memory deltaExternal\\n        );\\n\\n    function bribeTokens(IGauge gauge) external view returns (Token[] memory);\\n\\n    function bribeRates(IGauge gauge) external view returns (uint256[] memory);\\n}\\n\\ninterface IFacet {\\n    function initializeFacet() external;\\n}\\n\\ninterface IFactory {\\n    function pools(Token quote, Token base) external view returns (IPool pool);\\n}\\n\\nstruct VelocoreOperation {\\n    bytes32 poolId;\\n    bytes32[] tokenInformations;\\n    bytes data;\\n}\\n\\ninterface IVault {\\n    event Swap(\\n        ISwap indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Gauge(\\n        IGauge indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Convert(\\n        IConverter indexed pool,\\n        address indexed user,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event Vote(IGauge indexed pool, address indexed user, int256 voteDelta);\\n    event UserBalance(\\n        address indexed to,\\n        address indexed from,\\n        Token[] tokenRef,\\n        int128[] delta\\n    );\\n    event BribeAttached(IGauge indexed gauge, IBribe indexed bribe);\\n    event BribeKilled(IGauge indexed gauge, IBribe indexed bribe);\\n    event GaugeKilled(IGauge indexed gauge, bool killed);\\n\\n    function notifyInitialSupply(Token, uint128, uint128) external;\\n\\n    function attachBribe(IGauge gauge, IBribe bribe) external;\\n\\n    function killBribe(IGauge gauge, IBribe bribe) external;\\n\\n    function killGauge(IGauge gauge, bool t) external;\\n\\n    function ballotToken() external returns (Token);\\n\\n    function emissionToken() external returns (Token);\\n\\n    function execute(\\n        Token[] calldata tokenRef,\\n        int128[] memory deposit,\\n        VelocoreOperation[] calldata ops\\n    ) external payable;\\n\\n    function query(\\n        address user,\\n        Token[] calldata tokenRef,\\n        int128[] memory deposit,\\n        VelocoreOperation[] calldata ops\\n    ) external returns (int128[] memory);\\n\\n    function admin_setFunctions(\\n        address implementation,\\n        bytes4[] calldata sigs\\n    ) external;\\n\\n    function admin_addFacet(IFacet implementation) external;\\n\\n    function admin_setAuthorizer(IAuthorizer auth_) external;\\n\\n    function inspect(address lens, bytes memory data) external;\\n}\\n\",\"keccak256\":\"0x5e9ea97888ff7c1fc32d5ddbbea61eea4218d0d5aac5cb62d6821cfd8aae1a62\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xde5f9aeade0af65f0bb5360faa681743e75e9692e87ac94389dc40ee28756bbb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SafeToken.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.10;\\n\\ninterface ERC20Interface {\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\\nlibrary SafeToken {\\n    function myBalance(address token) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(address(this));\\n    }\\n\\n    function balanceOf(\\n        address token,\\n        address user\\n    ) internal view returns (uint256) {\\n        return ERC20Interface(token).balanceOf(user);\\n    }\\n\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeApprove\\\"\\n        );\\n    }\\n\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransfer\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"!safeTransferFrom\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"!safeTransferETH\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb8d215aab7e034207135c7eb3165a9da8723f6ce1536b4c330d7ae316ea74f23\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c806384d572b4116100ab578063b6b55f251161006f578063b6b55f2514610401578063bfe1092814610414578063e9c714f214610448578063ea988b591461045d578063eb5ab75f1461047d578063f851a4401461049d57600080fd5b806384d572b4146103455780638bc85b031461035a578063a4fa00e01461038e578063b04c1e02146103a3578063b3f05b97146103d757600080fd5b80634bb278f3116100f25780634bb278f31461027a578063506ec0951461028f5780635f33f281146102c357806366082ffc146102f7578063796b89b91461033257600080fd5b806326782247146101855780632c995cae146101c2578063345ef941146102045780633a74a767146102245780633e413bee1461024657600080fd5b366101805760405162461bcd60e51b815260206004820152601c60248201527f4c697175696469747947656e657261746f723a204241445f43414c4c0000000060448201526064015b60405180910390fd5b600080fd5b34801561019157600080fd5b506001546101a5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101ce57600080fd5b506101f67f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101b9565b34801561021057600080fd5b506002546101a5906001600160a01b031681565b34801561023057600080fd5b5061024461023f3660046111b6565b6104c2565b005b34801561025257600080fd5b506101a57f000000000000000000000000000000000000000000000000000000000000000081565b34801561028657600080fd5b50610244610579565b34801561029b57600080fd5b506101f67f000000000000000000000000000000000000000000000000000000000000000081565b3480156102cf57600080fd5b506101a57f000000000000000000000000000000000000000000000000000000000000000081565b34801561030357600080fd5b506103176103123660046111b6565b61076d565b604080519384526020840192909252908201526060016101b9565b34801561033e57600080fd5b50426101f6565b34801561035157600080fd5b506101f661080e565b34801561036657600080fd5b506101f67f000000000000000000000000000000000000000000000000000000000000000081565b34801561039a57600080fd5b506101f6610897565b3480156103af57600080fd5b506101a57f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e357600080fd5b506000546103f19060ff1681565b60405190151581526020016101b9565b61024461040f3660046111df565b6108f7565b34801561042057600080fd5b506101a57f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b50610244610db2565b34801561046957600080fd5b506103176104783660046111b6565b610e9e565b34801561048957600080fd5b506102446104983660046111b6565b610ef5565b3480156104a957600080fd5b506000546101a59061010090046001600160a01b031681565b60005461010090046001600160a01b031633146104f15760405162461bcd60e51b8152600401610177906111f8565b6001600160a01b0381166105175760405162461bcd60e51b81526004016101779061122f565b600180546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fce9caef2978509c160ecb4635d80502a939fccaf6f7f6967edbe940500cffd7791015b60405180910390a15050565b60005460ff16156105cc5760405162461bcd60e51b815260206004820152601d60248201527f4c697175696469747947656e657261746f723a2046494e414c495a45440000006044820152606401610177565b427f000000000000000000000000000000000000000000000000000000000000000081101561063d5760405162461bcd60e51b815260206004820152601c60248201527f4c697175696469747947656e657261746f723a20544f4f5f534f4f4e000000006044820152606401610177565b600254600090610679906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116611030565b6002549091506000906106b8906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116611030565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561070a57600080fd5b505af115801561071e573d6000803e3d6000fd5b50506000805460ff19166001179055505060408051838152602081018390527fb968440accd1ce5fa60b00de8bb8d8487eb2fda3c3701fb30fea3f69aa910a48910160405180910390a1505050565b6040516375c1018960e11b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063eb820312906024015b606060405180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611272565b9250925092509193909250565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089291906112a0565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633a98ef396040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086e573d6000803e3d6000fd5b427f00000000000000000000000000000000000000000000000000000000000000008110156109685760405162461bcd60e51b815260206004820152601c60248201527f4c697175696469747947656e657261746f723a20544f4f5f534f4f4e000000006044820152606401610177565b7f000000000000000000000000000000000000000000000000000000000000000081106109d75760405162461bcd60e51b815260206004820152601c60248201527f4c697175696469747947656e657261746f723a20544f4f5f4c415445000000006044820152606401610177565b62989680821015610a345760405162461bcd60e51b815260206004820152602160248201527f4c697175696469747947656e657261746f723a20494e56414c49445f56414c556044820152604560f81b6064820152608401610177565b6002546001600160a01b0316610a9e5760405162461bcd60e51b815260206004820152602960248201527f4c697175696469747947656e657261746f723a205a45524f5f414444524553536044820152685f524553455256455360b81b6064820152608401610177565b600254610ada906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116913391168561109e565b6040516375c1018960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb82031290602401606060405180830381865afa158015610b41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b659190611272565b509091508190507f0000000000000000000000000000000000000000000000000000000000000000831015610c2257610b9e828561101d565b6040516304674a9360e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634674a93090604401600060405180830381600087803b158015610c0957600080fd5b505af1158015610c1d573d6000803e3d6000fd5b505050505b6040516375c1018960e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb82031290602401606060405180830381865afa158015610c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cad9190611272565b5090915060009050610cbf828761101d565b6040516304674a9360e41b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634674a93090604401600060405180830381600087803b158015610d2a57600080fd5b505af1158015610d3e573d6000803e3d6000fd5b50505050336001600160a01b03167ff943cf10ef4d1e3239f4716ddecdf546e8ba8ab0e41deafd9a71a99936827e4587610d7661080e565b610d7e610897565b60408051938452602084019290925290820152606081018490526080810186905260a00160405180910390a2505050505050565b6001546001600160a01b03163314610ddc5760405162461bcd60e51b8152600401610177906111f8565b60008054600180546001600160a01b03808216610100818102610100600160a81b0319871617968790556001600160a01b031990931690935560408051948390048216808652929095041660208401529290917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a1600154604080516001600160a01b03808516825290921660208301527fce9caef2978509c160ecb4635d80502a939fccaf6f7f6967edbe940500cffd77910161056d565b6040516375c1018960e11b81526001600160a01b038281166004830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063eb820312906024016107c0565b7f00000000000000000000000000000000000000000000000000000000000000004210610f6e5760405162461bcd60e51b815260206004820152602160248201527f4c697175696469747947656e657261746f723a204576656e74205374617274656044820152601960fa1b6064820152608401610177565b60005461010090046001600160a01b03163314610f9d5760405162461bcd60e51b8152600401610177906111f8565b6001600160a01b038116610fc35760405162461bcd60e51b81526004016101779061122f565b600280546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f3a4c1ee31657ea6603d60e66b12beae947df172538a56cb59b9f0c5534664578910161056d565b600061102982846112b9565b9392505050565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a0823190602401602060405180830381865afa15801561107a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102991906112a0565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161110291906112df565b6000604051808303816000865af19150503d806000811461113f576040519150601f19603f3d011682016040523d82523d6000602084013e611144565b606091505b509150915081801561116e57508051158061116e57508080602001905181019061116e919061131a565b6111ae5760405162461bcd60e51b815260206004820152601160248201527021736166655472616e7366657246726f6d60781b6044820152606401610177565b505050505050565b6000602082840312156111c857600080fd5b81356001600160a01b038116811461102957600080fd5b6000602082840312156111f157600080fd5b5035919050565b6020808252601d908201527f4c697175696469747947656e657261746f723a20464f5242494444454e000000604082015260600190565b60208082526023908201527f4c697175696469747947656e657261746f723a20494e56414c49445f4144445260408201526245535360e81b606082015260800190565b60008060006060848603121561128757600080fd5b8351925060208401519150604084015190509250925092565b6000602082840312156112b257600080fd5b5051919050565b600082198211156112da57634e487b7160e01b600052601160045260246000fd5b500190565b6000825160005b8181101561130057602081860181015185830152016112e6565b8181111561130f576000828501525b509190910192915050565b60006020828403121561132c57600080fd5b8151801515811461102957600080fdfea264697066735822122050c8bdfac12daff3bac48761968ea65a19bc8fac4197da4891b6c5452137fd0564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4089,
        "contract": "contracts/LiquidityGenerator.sol:LiquidityGenerator",
        "label": "finalized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4091,
        "contract": "contracts/LiquidityGenerator.sol:LiquidityGenerator",
        "label": "admin",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4093,
        "contract": "contracts/LiquidityGenerator.sol:LiquidityGenerator",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4095,
        "contract": "contracts/LiquidityGenerator.sol:LiquidityGenerator",
        "label": "reservesManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}